
out.elf:     file format elf32-tradlittlemips


Disassembly of section .config_BFC02FF0:

bfc02ff0 <__config_BFC02FF0>:
bfc02ff0:	ff ff fe fa                                         ....

Disassembly of section .config_BFC02FF4:

bfc02ff4 <__config_BFC02FF4>:
bfc02ff4:	d9 79 f8 ff                                         .y..

Disassembly of section .config_BFC02FF8:

bfc02ff8 <__config_BFC02FF8>:
bfc02ff8:	db ce 6c ff                                         ..l.

Disassembly of section .config_BFC02FFC:

bfc02ffc <__config_BFC02FFC>:
bfc02ffc:	ff ff ff 7e                                         ...~

Disassembly of section .reset:

bd001970 <_reset>:
bd001970:	0f40065e 	jal	bd001978 <_startup>
bd001974:	00000000 	nop

bd001978 <_startup>:
bd001978:	401a6000 	mfc0	k0,c0_status
bd00197c:	7f5a04c0 	ext	k0,k0,0x13,0x1
bd001980:	13400005 	beqz	k0,bd001998 <_no_nmi>
bd001984:	00000000 	nop
bd001988:	3c1a9d00 	lui	k0,0x9d00
bd00198c:	275a41b4 	addiu	k0,k0,16820
bd001990:	03400008 	jr	k0
bd001994:	00000000 	nop

bd001998 <_no_nmi>:
bd001998:	3c1da002 	lui	sp,0xa002
bd00199c:	27bdfff0 	addiu	sp,sp,-16
bd0019a0:	3c1ca000 	lui	gp,0xa000
bd0019a4:	279c7ff0 	addiu	gp,gp,32752
bd0019a8:	40096002 	mfc0	t1,c0_srsctl
bd0019ac:	01205820 	add	t3,t1,zero
bd0019b0:	7d2a1e80 	ext	t2,t1,0x1a,0x4
bd0019b4:	7d494984 	ins	t1,t2,0x6,0x4
bd0019b8:	40896002 	mtc0	t1,c0_srsctl
bd0019bc:	000000c0 	ehb
bd0019c0:	41dce000 	wrpgpr	gp,gp
bd0019c4:	408b6002 	mtc0	t3,c0_srsctl
bd0019c8:	000000c0 	ehb
bd0019cc:	3c089d00 	lui	t0,0x9d00
bd0019d0:	250841cc 	addiu	t0,t0,16844
bd0019d4:	0100f809 	jalr	t0
bd0019d8:	00000000 	nop
bd0019dc:	3c08a000 	lui	t0,0xa000
bd0019e0:	25080004 	addiu	t0,t0,4
bd0019e4:	3c09a000 	lui	t1,0xa000
bd0019e8:	25290004 	addiu	t1,t1,4
bd0019ec:	10000006 	b	bd001a08 <_bss_check>
bd0019f0:	00000000 	nop

bd0019f4 <_bss_init>:
bd0019f4:	ad000000 	sw	zero,0(t0)
bd0019f8:	ad000004 	sw	zero,4(t0)
bd0019fc:	ad000008 	sw	zero,8(t0)
bd001a00:	ad00000c 	sw	zero,12(t0)
bd001a04:	25080010 	addiu	t0,t0,16

bd001a08 <_bss_check>:
bd001a08:	0109082b 	sltu	at,t0,t1
bd001a0c:	1420fff9 	bnez	at,bd0019f4 <_bss_init>
bd001a10:	00000000 	nop

bd001a14 <_dinit_init>:
bd001a14:	3c089d00 	lui	t0,0x9d00
bd001a18:	25083da0 	addiu	t0,t0,15776
bd001a1c:	8d090000 	lw	t1,0(t0)
bd001a20:	11200018 	beqz	t1,bd001a84 <_dinit_end+0x18>
bd001a24:	25080004 	addiu	t0,t0,4
bd001a28:	8d0a0000 	lw	t2,0(t0)
bd001a2c:	25080004 	addiu	t0,t0,4
bd001a30:	8d0b0000 	lw	t3,0(t0)
bd001a34:	11600009 	beqz	t3,bd001a5c <_dinit_clear>
bd001a38:	25080004 	addiu	t0,t0,4

bd001a3c <_dinit_copy>:
bd001a3c:	910c0000 	lbu	t4,0(t0)
bd001a40:	254affff 	addiu	t2,t2,-1
bd001a44:	25080001 	addiu	t0,t0,1
bd001a48:	a12c0000 	sb	t4,0(t1)
bd001a4c:	1540fffb 	bnez	t2,bd001a3c <_dinit_copy>
bd001a50:	25290001 	addiu	t1,t1,1
bd001a54:	10000005 	b	bd001a6c <_dinit_end>
bd001a58:	00000000 	nop

bd001a5c <_dinit_clear>:
bd001a5c:	a1200000 	sb	zero,0(t1)
bd001a60:	254affff 	addiu	t2,t2,-1
bd001a64:	1540fffd 	bnez	t2,bd001a5c <_dinit_clear>
bd001a68:	25290001 	addiu	t1,t1,1

bd001a6c <_dinit_end>:
bd001a6c:	25080003 	addiu	t0,t0,3
bd001a70:	240afffc 	li	t2,-4
bd001a74:	01484024 	and	t0,t2,t0
bd001a78:	8d090000 	lw	t1,0(t0)
bd001a7c:	1520ffe7 	bnez	t1,bd001a1c <_dinit_init+0x8>
bd001a80:	00000000 	nop
bd001a84:	3c090000 	lui	t1,0x0
bd001a88:	25290000 	addiu	t1,t1,0
bd001a8c:	11200010 	beqz	t1,bd001ad0 <_ramfunc_done>
bd001a90:	00000000 	nop
bd001a94:	3c090002 	lui	t1,0x2
bd001a98:	25290000 	addiu	t1,t1,0
bd001a9c:	3c0abf88 	lui	t2,0xbf88
bd001aa0:	254a2010 	addiu	t2,t2,8208
bd001aa4:	ad490000 	sw	t1,0(t2)
bd001aa8:	3c090002 	lui	t1,0x2
bd001aac:	25290000 	addiu	t1,t1,0
bd001ab0:	3c0abf88 	lui	t2,0xbf88
bd001ab4:	254a2020 	addiu	t2,t2,8224
bd001ab8:	ad490000 	sw	t1,0(t2)
bd001abc:	3c090002 	lui	t1,0x2
bd001ac0:	25290000 	addiu	t1,t1,0
bd001ac4:	3c0abf88 	lui	t2,0xbf88
bd001ac8:	254a2030 	addiu	t2,t2,8240
bd001acc:	ad490000 	sw	t1,0(t2)

bd001ad0 <_ramfunc_done>:
bd001ad0:	40804800 	mtc0	zero,c0_count
bd001ad4:	240affff 	li	t2,-1
bd001ad8:	408a5800 	mtc0	t2,c0_compare
bd001adc:	3c099d00 	lui	t1,0x9d00
bd001ae0:	25290000 	addiu	t1,t1,0
bd001ae4:	40897801 	mtc0	t1,c0_ebase
bd001ae8:	3c090000 	lui	t1,0x0
bd001aec:	25290001 	addiu	t1,t1,1
bd001af0:	240a0000 	li	t2,0
bd001af4:	7d2a4944 	ins	t2,t1,0x5,0x5
bd001af8:	408a6001 	mtc0	t2,c0_intctl
bd001afc:	3c090080 	lui	t1,0x80
bd001b00:	40896800 	mtc0	t1,c0_cause
bd001b04:	40088000 	mfc0	t0,c0_config
bd001b08:	7d090580 	ext	t1,t0,0x16,0x1
bd001b0c:	00094c40 	sll	t1,t1,0x11
bd001b10:	40086000 	mfc0	t0,c0_status
bd001b14:	3c010058 	lui	at,0x58
bd001b18:	01014024 	and	t0,t0,at
bd001b1c:	01284025 	or	t0,t1,t0
bd001b20:	40886000 	mtc0	t0,c0_status
bd001b24:	000000c0 	ehb
bd001b28:	3c089d00 	lui	t0,0x9d00
bd001b2c:	250841d4 	addiu	t0,t0,16852
bd001b30:	0100f809 	jalr	t0
bd001b34:	00000000 	nop
bd001b38:	40086000 	mfc0	t0,c0_status
bd001b3c:	3c01ffbf 	lui	at,0xffbf
bd001b40:	3421ffff 	ori	at,at,0xffff
bd001b44:	01014024 	and	t0,t0,at
bd001b48:	40886000 	mtc0	t0,c0_status
bd001b4c:	30840000 	andi	a0,a0,0x0
bd001b50:	30a50000 	andi	a1,a1,0x0
bd001b54:	3c089d00 	lui	t0,0x9d00
bd001b58:	25084018 	addiu	t0,t0,16408
bd001b5c:	01000008 	jr	t0
bd001b60:	00000000 	nop

Disassembly of section .bev_excpt:

bd001cf0 <_bev_exception>:
bd001cf0:	3c1a9d00 	lui	k0,0x9d00
bd001cf4:	275a406c 	addiu	k0,k0,16492
bd001cf8:	03400008 	jr	k0
bd001cfc:	00000000 	nop

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d00 	lui	k0,0x9d00
9d000184:	275a3b1c 	addiu	k0,k0,15132
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_dispatch_0>:
9d000200:	0b40103f 	j	9d0040fc <.LFE0>
9d000204:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_dispatch_1>:
9d000220:	0b40103f 	j	9d0040fc <.LFE0>
9d000224:	00000000 	nop

Disassembly of section .vector_2:

9d000240 <__vector_dispatch_2>:
9d000240:	0b40103f 	j	9d0040fc <.LFE0>
9d000244:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_dispatch_3>:
9d000260:	0b40103f 	j	9d0040fc <.LFE0>
9d000264:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_dispatch_4>:
9d000280:	0b40103f 	j	9d0040fc <.LFE0>
9d000284:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_dispatch_5>:
9d0002a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0002a4:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_dispatch_6>:
9d0002c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0002c4:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_dispatch_7>:
9d0002e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0002e4:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_dispatch_8>:
9d000300:	0b40103f 	j	9d0040fc <.LFE0>
9d000304:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_dispatch_9>:
9d000320:	0b40103f 	j	9d0040fc <.LFE0>
9d000324:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_dispatch_10>:
9d000340:	0b40103f 	j	9d0040fc <.LFE0>
9d000344:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_dispatch_11>:
9d000360:	0b40103f 	j	9d0040fc <.LFE0>
9d000364:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_dispatch_12>:
9d000380:	0b40103f 	j	9d0040fc <.LFE0>
9d000384:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_dispatch_13>:
9d0003a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0003a4:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_dispatch_14>:
9d0003c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0003c4:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_dispatch_15>:
9d0003e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0003e4:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_dispatch_16>:
9d000400:	0b40103f 	j	9d0040fc <.LFE0>
9d000404:	00000000 	nop

Disassembly of section .vector_17:

9d000420 <__vector_dispatch_17>:
9d000420:	0b40103f 	j	9d0040fc <.LFE0>
9d000424:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_dispatch_18>:
9d000440:	0b40103f 	j	9d0040fc <.LFE0>
9d000444:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_dispatch_19>:
9d000460:	0b40103f 	j	9d0040fc <.LFE0>
9d000464:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_dispatch_20>:
9d000480:	0b40103f 	j	9d0040fc <.LFE0>
9d000484:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_dispatch_21>:
9d0004a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0004a4:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_dispatch_22>:
9d0004c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0004c4:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_dispatch_23>:
9d0004e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0004e4:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_dispatch_24>:
9d000500:	0b40103f 	j	9d0040fc <.LFE0>
9d000504:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_dispatch_25>:
9d000520:	0b40103f 	j	9d0040fc <.LFE0>
9d000524:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_dispatch_26>:
9d000540:	0b40103f 	j	9d0040fc <.LFE0>
9d000544:	00000000 	nop

Disassembly of section .vector_27:

9d000560 <__vector_dispatch_27>:
9d000560:	0b40103f 	j	9d0040fc <.LFE0>
9d000564:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_dispatch_28>:
9d000580:	0b40103f 	j	9d0040fc <.LFE0>
9d000584:	00000000 	nop

Disassembly of section .vector_29:

9d0005a0 <__vector_dispatch_29>:
9d0005a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0005a4:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_dispatch_30>:
9d0005c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0005c4:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_dispatch_31>:
9d0005e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0005e4:	00000000 	nop

Disassembly of section .vector_32:

9d000600 <__vector_dispatch_32>:
9d000600:	0b40103f 	j	9d0040fc <.LFE0>
9d000604:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_dispatch_33>:
9d000620:	0b40103f 	j	9d0040fc <.LFE0>
9d000624:	00000000 	nop

Disassembly of section .vector_34:

9d000640 <__vector_dispatch_34>:
9d000640:	0b40103f 	j	9d0040fc <.LFE0>
9d000644:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_dispatch_35>:
9d000660:	0b40103f 	j	9d0040fc <.LFE0>
9d000664:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_dispatch_36>:
9d000680:	0b40103f 	j	9d0040fc <.LFE0>
9d000684:	00000000 	nop

Disassembly of section .vector_37:

9d0006a0 <__vector_dispatch_37>:
9d0006a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0006a4:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_dispatch_38>:
9d0006c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0006c4:	00000000 	nop

Disassembly of section .vector_39:

9d0006e0 <__vector_dispatch_39>:
9d0006e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0006e4:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_dispatch_40>:
9d000700:	0b40103f 	j	9d0040fc <.LFE0>
9d000704:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_dispatch_41>:
9d000720:	0b40103f 	j	9d0040fc <.LFE0>
9d000724:	00000000 	nop

Disassembly of section .vector_42:

9d000740 <__vector_dispatch_42>:
9d000740:	0b40103f 	j	9d0040fc <.LFE0>
9d000744:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_dispatch_43>:
9d000760:	0b40103f 	j	9d0040fc <.LFE0>
9d000764:	00000000 	nop

Disassembly of section .vector_44:

9d000780 <__vector_dispatch_44>:
9d000780:	0b40103f 	j	9d0040fc <.LFE0>
9d000784:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_dispatch_45>:
9d0007a0:	0b40103f 	j	9d0040fc <.LFE0>
9d0007a4:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_dispatch_46>:
9d0007c0:	0b40103f 	j	9d0040fc <.LFE0>
9d0007c4:	00000000 	nop

Disassembly of section .vector_47:

9d0007e0 <__vector_dispatch_47>:
9d0007e0:	0b40103f 	j	9d0040fc <.LFE0>
9d0007e4:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_dispatch_48>:
9d000800:	0b40103f 	j	9d0040fc <.LFE0>
9d000804:	00000000 	nop

Disassembly of section .vector_49:

9d000820 <__vector_dispatch_49>:
9d000820:	0b40103f 	j	9d0040fc <.LFE0>
9d000824:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_dispatch_50>:
9d000840:	0b40103f 	j	9d0040fc <.LFE0>
9d000844:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_dispatch_51>:
9d000860:	0b40103f 	j	9d0040fc <.LFE0>
9d000864:	00000000 	nop

Disassembly of section ._debug_exception:

bfc00480 <__DbgExecReturn>:
bfc00480:	409bf800 	mtc0	k1,c0_desave
bfc00484:	000000c0 	ehb
bfc00488:	3c1b9d00 	lui	k1,0x9d00
bfc0048c:	277b4144 	addiu	k1,k1,16708
bfc00490:	13600002 	beqz	k1,bfc0049c <__DbgExecReturn+0x1c>
bfc00494:	00000000 	nop
bfc00498:	409bc000 	mtc0	k1,c0_depc
bfc0049c:	401bf800 	mfc0	k1,c0_desave
bfc004a0:	000000c0 	ehb
bfc004a4:	4200001f 	deret
bfc004a8:	00000000 	nop

Disassembly of section .text._vfprintf_cdnopuxX:

9d001e00 <_vfprintf_cdnopuxX>:
9d001e00:	27bdffb0 	addiu	sp,sp,-80
9d001e04:	afbf004c 	sw	ra,76(sp)
9d001e08:	afbe0048 	sw	s8,72(sp)
9d001e0c:	afb70044 	sw	s7,68(sp)
9d001e10:	afb60040 	sw	s6,64(sp)
9d001e14:	afb5003c 	sw	s5,60(sp)
9d001e18:	afb40038 	sw	s4,56(sp)
9d001e1c:	afb30034 	sw	s3,52(sp)
9d001e20:	afb20030 	sw	s2,48(sp)
9d001e24:	afb1002c 	sw	s1,44(sp)
9d001e28:	afb00028 	sw	s0,40(sp)
9d001e2c:	00808821 	move	s1,a0
9d001e30:	00a0f021 	move	s8,a1
9d001e34:	afa60058 	sw	a2,88(sp)
9d001e38:	00008021 	move	s0,zero
9d001e3c:	83c40000 	lb	a0,0(s8)
9d001e40:	27d20001 	addiu	s2,s8,1
9d001e44:	108000d4 	beqz	a0,9d002198 <_vfprintf_cdnopuxX+0x398>
9d001e48:	a3a40012 	sb	a0,18(sp)
9d001e4c:	24020025 	li	v0,37
9d001e50:	1482001c 	bne	a0,v0,9d001ec4 <_vfprintf_cdnopuxX+0xc4>
9d001e54:	27c20002 	addiu	v0,s8,2
9d001e58:	0000b821 	move	s7,zero
9d001e5c:	2404002b 	li	a0,43
9d001e60:	2405002d 	li	a1,45
9d001e64:	24070030 	li	a3,48
9d001e68:	24060020 	li	a2,32
9d001e6c:	8053ffff 	lb	s3,-1(v0)
9d001e70:	245effff 	addiu	s8,v0,-1
9d001e74:	1264000c 	beq	s3,a0,9d001ea8 <_vfprintf_cdnopuxX+0xa8>
9d001e78:	2a63002c 	slti	v1,s3,44
9d001e7c:	1460000d 	bnez	v1,9d001eb4 <_vfprintf_cdnopuxX+0xb4>
9d001e80:	00000000 	nop
9d001e84:	5265009a 	beql	s3,a1,9d0020f0 <_vfprintf_cdnopuxX+0x2f0>
9d001e88:	36f70008 	ori	s7,s7,0x8
9d001e8c:	16670014 	bne	s3,a3,9d001ee0 <_vfprintf_cdnopuxX+0xe0>
9d001e90:	24420001 	addiu	v0,v0,1
9d001e94:	36f70004 	ori	s7,s7,0x4
9d001e98:	8053ffff 	lb	s3,-1(v0)
9d001e9c:	245effff 	addiu	s8,v0,-1
9d001ea0:	1664fff6 	bne	s3,a0,9d001e7c <_vfprintf_cdnopuxX+0x7c>
9d001ea4:	2a63002c 	slti	v1,s3,44
9d001ea8:	36f70002 	ori	s7,s7,0x2
9d001eac:	0b4007a6 	j	9d001e98 <_vfprintf_cdnopuxX+0x98>
9d001eb0:	24420001 	addiu	v0,v0,1
9d001eb4:	1666000a 	bne	s3,a2,9d001ee0 <_vfprintf_cdnopuxX+0xe0>
9d001eb8:	24420001 	addiu	v0,v0,1
9d001ebc:	0b4007a6 	j	9d001e98 <_vfprintf_cdnopuxX+0x98>
9d001ec0:	36f70001 	ori	s7,s7,0x1
9d001ec4:	0f400dea 	jal	9d0037a8 <fputc>
9d001ec8:	02202821 	move	a1,s1
9d001ecc:	2403ffff 	li	v1,-1
9d001ed0:	1043ffda 	beq	v0,v1,9d001e3c <_vfprintf_cdnopuxX+0x3c>
9d001ed4:	0240f021 	move	s8,s2
9d001ed8:	0b40078f 	j	9d001e3c <_vfprintf_cdnopuxX+0x3c>
9d001edc:	26100001 	addiu	s0,s0,1
9d001ee0:	3c039d00 	lui	v1,0x9d00
9d001ee4:	24633a19 	addiu	v1,v1,14873
9d001ee8:	00731021 	addu	v0,v1,s3
9d001eec:	90420000 	lbu	v0,0(v0)
9d001ef0:	32e40002 	andi	a0,s7,0x2
9d001ef4:	32e3fffe 	andi	v1,s7,0xfffe
9d001ef8:	0064b80b 	movn	s7,v1,a0
9d001efc:	32e40008 	andi	a0,s7,0x8
9d001f00:	32e3fffb 	andi	v1,s7,0xfffb
9d001f04:	30420004 	andi	v0,v0,0x4
9d001f08:	03c02821 	move	a1,s8
9d001f0c:	1040007a 	beqz	v0,9d0020f8 <_vfprintf_cdnopuxX+0x2f8>
9d001f10:	0064b80b 	movn	s7,v1,a0
9d001f14:	0b4007c8 	j	9d001f20 <_vfprintf_cdnopuxX+0x120>
9d001f18:	00001021 	move	v0,zero
9d001f1c:	00609821 	move	s3,v1
9d001f20:	27de0001 	addiu	s8,s8,1
9d001f24:	83c30000 	lb	v1,0(s8)
9d001f28:	00022840 	sll	a1,v0,0x1
9d001f2c:	000210c0 	sll	v0,v0,0x3
9d001f30:	3c069d00 	lui	a2,0x9d00
9d001f34:	24c63a19 	addiu	a2,a2,14873
9d001f38:	00c32021 	addu	a0,a2,v1
9d001f3c:	90840000 	lbu	a0,0(a0)
9d001f40:	00a21021 	addu	v0,a1,v0
9d001f44:	00539821 	addu	s3,v0,s3
9d001f48:	30840004 	andi	a0,a0,0x4
9d001f4c:	1480fff3 	bnez	a0,9d001f1c <_vfprintf_cdnopuxX+0x11c>
9d001f50:	2662ffd0 	addiu	v0,s3,-48
9d001f54:	2404002e 	li	a0,46
9d001f58:	1064006e 	beq	v1,a0,9d002114 <_vfprintf_cdnopuxX+0x314>
9d001f5c:	0000a821 	move	s5,zero
9d001f60:	2404006c 	li	a0,108
9d001f64:	24060010 	li	a2,16
9d001f68:	34058000 	li	a1,0x8000
9d001f6c:	10640102 	beq	v1,a0,9d002378 <_vfprintf_cdnopuxX+0x578>
9d001f70:	27de0001 	addiu	s8,s8,1
9d001f74:	2864006d 	slti	a0,v1,109
9d001f78:	14800080 	bnez	a0,9d00217c <_vfprintf_cdnopuxX+0x37c>
9d001f7c:	24040073 	li	a0,115
9d001f80:	106400ed 	beq	v1,a0,9d002338 <_vfprintf_cdnopuxX+0x538>
9d001f84:	28640074 	slti	a0,v1,116
9d001f88:	1480009a 	bnez	a0,9d0021f4 <_vfprintf_cdnopuxX+0x3f4>
9d001f8c:	24040075 	li	a0,117
9d001f90:	106400e6 	beq	v1,a0,9d00232c <_vfprintf_cdnopuxX+0x52c>
9d001f94:	24040078 	li	a0,120
9d001f98:	146400ff 	bne	v1,a0,9d002398 <_vfprintf_cdnopuxX+0x598>
9d001f9c:	a3a30012 	sb	v1,18(sp)
9d001fa0:	36f70080 	ori	s7,s7,0x80
9d001fa4:	32e300c0 	andi	v1,s7,0xc0
9d001fa8:	14600088 	bnez	v1,9d0021cc <_vfprintf_cdnopuxX+0x3cc>
9d001fac:	7c171e20 	seh	v1,s7
9d001fb0:	04620219 	bltzl	v1,9d002818 <_vfprintf_cdnopuxX+0xa18>
9d001fb4:	8fa60058 	lw	a2,88(sp)
9d001fb8:	32e30010 	andi	v1,s7,0x10
9d001fbc:	10600108 	beqz	v1,9d0023e0 <_vfprintf_cdnopuxX+0x5e0>
9d001fc0:	8fa40058 	lw	a0,88(sp)
9d001fc4:	8fa70058 	lw	a3,88(sp)
9d001fc8:	8ce30000 	lw	v1,0(a3)
9d001fcc:	24e70004 	addiu	a3,a3,4
9d001fd0:	afa70058 	sw	a3,88(sp)
9d001fd4:	000327c3 	sra	a0,v1,0x1f
9d001fd8:	0060b021 	move	s6,v1
9d001fdc:	0080a021 	move	s4,a0
9d001fe0:	00802821 	move	a1,a0
9d001fe4:	04a10006 	bgez	a1,9d002000 <_vfprintf_cdnopuxX+0x200>
9d001fe8:	00035823 	negu	t3,v1
9d001fec:	000b182b 	sltu	v1,zero,t3
9d001ff0:	00042023 	negu	a0,a0
9d001ff4:	36f70003 	ori	s7,s7,0x3
9d001ff8:	0160b021 	move	s6,t3
9d001ffc:	0083a023 	subu	s4,a0,v1
9d002000:	16a00003 	bnez	s5,9d002010 <_vfprintf_cdnopuxX+0x210>
9d002004:	32f200c0 	andi	s2,s7,0xc0
9d002008:	02d4a825 	or	s5,s6,s4
9d00200c:	2eb50001 	sltiu	s5,s5,1
9d002010:	24030040 	li	v1,64
9d002014:	124301d3 	beq	s2,v1,9d002764 <_vfprintf_cdnopuxX+0x964>
9d002018:	2e430041 	sltiu	v1,s2,65
9d00201c:	146000f8 	bnez	v1,9d002400 <_vfprintf_cdnopuxX+0x600>
9d002020:	24030080 	li	v1,128
9d002024:	124301b7 	beq	s2,v1,9d002704 <_vfprintf_cdnopuxX+0x904>
9d002028:	24030001 	li	v1,1
9d00202c:	240300c0 	li	v1,192
9d002030:	564300f6 	bnel	s2,v1,9d00240c <_vfprintf_cdnopuxX+0x60c>
9d002034:	83b30012 	lb	s3,18(sp)
9d002038:	24030001 	li	v1,1
9d00203c:	12800211 	beqz	s4,9d002884 <_vfprintf_cdnopuxX+0xa84>
9d002040:	a3a30012 	sb	v1,18(sp)
9d002044:	3c049d00 	lui	a0,0x9d00
9d002048:	24843ce0 	addiu	a0,a0,15584
9d00204c:	24030003 	li	v1,3
9d002050:	24130002 	li	s3,2
9d002054:	0b400818 	j	9d002060 <_vfprintf_cdnopuxX+0x260>
9d002058:	240a0015 	li	t2,21
9d00205c:	00c09821 	move	s3,a2
9d002060:	8c850004 	lw	a1,4(a0)
9d002064:	24690001 	addiu	t1,v1,1
9d002068:	7c033420 	seb	a2,v1
9d00206c:	0285382b 	sltu	a3,s4,a1
9d002070:	14e0019a 	bnez	a3,9d0026dc <_vfprintf_cdnopuxX+0x8dc>
9d002074:	312300ff 	andi	v1,t1,0xff
9d002078:	50b401f6 	beql	a1,s4,9d002854 <_vfprintf_cdnopuxX+0xa54>
9d00207c:	8c850000 	lw	a1,0(a0)
9d002080:	146afff6 	bne	v1,t2,9d00205c <_vfprintf_cdnopuxX+0x25c>
9d002084:	24840008 	addiu	a0,a0,8
9d002088:	a3a60012 	sb	a2,18(sp)
9d00208c:	00c09821 	move	s3,a2
9d002090:	0275182a 	slt	v1,s3,s5
9d002094:	546000e1 	bnezl	v1,9d00241c <_vfprintf_cdnopuxX+0x61c>
9d002098:	7c159c20 	seb	s3,s5
9d00209c:	02b3182a 	slt	v1,s5,s3
9d0020a0:	0263a80b 	movn	s5,s3,v1
9d0020a4:	10400005 	beqz	v0,9d0020bc <_vfprintf_cdnopuxX+0x2bc>
9d0020a8:	32e34000 	andi	v1,s7,0x4000
9d0020ac:	32e30003 	andi	v1,s7,0x3
9d0020b0:	0003182b 	sltu	v1,zero,v1
9d0020b4:	00431023 	subu	v0,v0,v1
9d0020b8:	32e34000 	andi	v1,s7,0x4000
9d0020bc:	10600005 	beqz	v1,9d0020d4 <_vfprintf_cdnopuxX+0x2d4>
9d0020c0:	0262182a 	slt	v1,s3,v0
9d0020c4:	02a2182a 	slt	v1,s5,v0
9d0020c8:	00551023 	subu	v0,v0,s5
9d0020cc:	0003100a 	movz	v0,zero,v1
9d0020d0:	0262182a 	slt	v1,s3,v0
9d0020d4:	546000d8 	bnezl	v1,9d002438 <_vfprintf_cdnopuxX+0x638>
9d0020d8:	32e30004 	andi	v1,s7,0x4
9d0020dc:	32e20004 	andi	v0,s7,0x4
9d0020e0:	104001f7 	beqz	v0,9d0028c0 <_vfprintf_cdnopuxX+0xac0>
9d0020e4:	32e20008 	andi	v0,s7,0x8
9d0020e8:	0b400910 	j	9d002440 <_vfprintf_cdnopuxX+0x640>
9d0020ec:	00009821 	move	s3,zero
9d0020f0:	0b4007a6 	j	9d001e98 <_vfprintf_cdnopuxX+0x98>
9d0020f4:	24420001 	addiu	v0,v0,1
9d0020f8:	2402002a 	li	v0,42
9d0020fc:	12620043 	beq	s3,v0,9d00220c <_vfprintf_cdnopuxX+0x40c>
9d002100:	2404002e 	li	a0,46
9d002104:	02601821 	move	v1,s3
9d002108:	00001021 	move	v0,zero
9d00210c:	1464ff94 	bne	v1,a0,9d001f60 <_vfprintf_cdnopuxX+0x160>
9d002110:	0000a821 	move	s5,zero
9d002114:	83c30001 	lb	v1,1(s8)
9d002118:	2404002a 	li	a0,42
9d00211c:	106401ae 	beq	v1,a0,9d0027d8 <_vfprintf_cdnopuxX+0x9d8>
9d002120:	36f74000 	ori	s7,s7,0x4000
9d002124:	3c059d00 	lui	a1,0x9d00
9d002128:	24a53a19 	addiu	a1,a1,14873
9d00212c:	00a32021 	addu	a0,a1,v1
9d002130:	90840000 	lbu	a0,0(a0)
9d002134:	30840004 	andi	a0,a0,0x4
9d002138:	1080ff89 	beqz	a0,9d001f60 <_vfprintf_cdnopuxX+0x160>
9d00213c:	27de0001 	addiu	s8,s8,1
9d002140:	00152040 	sll	a0,s5,0x1
9d002144:	0015a8c0 	sll	s5,s5,0x3
9d002148:	27de0001 	addiu	s8,s8,1
9d00214c:	0095a821 	addu	s5,a0,s5
9d002150:	02a3a821 	addu	s5,s5,v1
9d002154:	83c30000 	lb	v1,0(s8)
9d002158:	3c079d00 	lui	a3,0x9d00
9d00215c:	24e73a19 	addiu	a3,a3,14873
9d002160:	00e32021 	addu	a0,a3,v1
9d002164:	90840000 	lbu	a0,0(a0)
9d002168:	30840004 	andi	a0,a0,0x4
9d00216c:	1480fff4 	bnez	a0,9d002140 <_vfprintf_cdnopuxX+0x340>
9d002170:	26b5ffd0 	addiu	s5,s5,-48
9d002174:	0b4007d9 	j	9d001f64 <_vfprintf_cdnopuxX+0x164>
9d002178:	2404006c 	li	a0,108
9d00217c:	24040063 	li	a0,99
9d002180:	1064002f 	beq	v1,a0,9d002240 <_vfprintf_cdnopuxX+0x440>
9d002184:	28640064 	slti	a0,v1,100
9d002188:	50800027 	beqzl	a0,9d002228 <_vfprintf_cdnopuxX+0x428>
9d00218c:	24040064 	li	a0,100
9d002190:	1460007f 	bnez	v1,9d002390 <_vfprintf_cdnopuxX+0x590>
9d002194:	24040058 	li	a0,88
9d002198:	02001021 	move	v0,s0
9d00219c:	8fbf004c 	lw	ra,76(sp)
9d0021a0:	8fbe0048 	lw	s8,72(sp)
9d0021a4:	8fb70044 	lw	s7,68(sp)
9d0021a8:	8fb60040 	lw	s6,64(sp)
9d0021ac:	8fb5003c 	lw	s5,60(sp)
9d0021b0:	8fb40038 	lw	s4,56(sp)
9d0021b4:	8fb30034 	lw	s3,52(sp)
9d0021b8:	8fb20030 	lw	s2,48(sp)
9d0021bc:	8fb1002c 	lw	s1,44(sp)
9d0021c0:	8fb00028 	lw	s0,40(sp)
9d0021c4:	03e00008 	jr	ra
9d0021c8:	27bd0050 	addiu	sp,sp,80
9d0021cc:	04600189 	bltz	v1,9d0027f4 <_vfprintf_cdnopuxX+0x9f4>
9d0021d0:	32e30010 	andi	v1,s7,0x10
9d0021d4:	1060007d 	beqz	v1,9d0023cc <_vfprintf_cdnopuxX+0x5cc>
9d0021d8:	8fa30058 	lw	v1,88(sp)
9d0021dc:	8fa70058 	lw	a3,88(sp)
9d0021e0:	8cf60000 	lw	s6,0(a3)
9d0021e4:	0000a021 	move	s4,zero
9d0021e8:	24e70004 	addiu	a3,a3,4
9d0021ec:	0b400800 	j	9d002000 <_vfprintf_cdnopuxX+0x200>
9d0021f0:	afa70058 	sw	a3,88(sp)
9d0021f4:	2404006f 	li	a0,111
9d0021f8:	14640173 	bne	v1,a0,9d0027c8 <_vfprintf_cdnopuxX+0x9c8>
9d0021fc:	24040070 	li	a0,112
9d002200:	a3a30012 	sb	v1,18(sp)
9d002204:	0b4007e9 	j	9d001fa4 <_vfprintf_cdnopuxX+0x1a4>
9d002208:	36f70040 	ori	s7,s7,0x40
9d00220c:	8fa70058 	lw	a3,88(sp)
9d002210:	8ce20000 	lw	v0,0(a3)
9d002214:	27de0001 	addiu	s8,s8,1
9d002218:	80a30001 	lb	v1,1(a1)
9d00221c:	24e70004 	addiu	a3,a3,4
9d002220:	0b4007d5 	j	9d001f54 <_vfprintf_cdnopuxX+0x154>
9d002224:	afa70058 	sw	a3,88(sp)
9d002228:	10640003 	beq	v1,a0,9d002238 <_vfprintf_cdnopuxX+0x438>
9d00222c:	24040069 	li	a0,105
9d002230:	54640059 	bnel	v1,a0,9d002398 <_vfprintf_cdnopuxX+0x598>
9d002234:	a3a30012 	sb	v1,18(sp)
9d002238:	0b4007e9 	j	9d001fa4 <_vfprintf_cdnopuxX+0x1a4>
9d00223c:	a3a30012 	sb	v1,18(sp)
9d002240:	8fa50058 	lw	a1,88(sp)
9d002244:	8ca40000 	lw	a0,0(a1)
9d002248:	32e60010 	andi	a2,s7,0x10
9d00224c:	24a70004 	addiu	a3,a1,4
9d002250:	00042fc3 	sra	a1,a0,0x1f
9d002254:	00052e00 	sll	a1,a1,0x18
9d002258:	00041a02 	srl	v1,a0,0x8
9d00225c:	00a31825 	or	v1,a1,v1
9d002260:	7c032c20 	seb	a1,v1
9d002264:	10c0006f 	beqz	a2,9d002424 <_vfprintf_cdnopuxX+0x624>
9d002268:	a3a50012 	sb	a1,18(sp)
9d00226c:	24630001 	addiu	v1,v1,1
9d002270:	306300ff 	andi	v1,v1,0xff
9d002274:	2c630002 	sltiu	v1,v1,2
9d002278:	5460006b 	bnezl	v1,9d002428 <_vfprintf_cdnopuxX+0x628>
9d00227c:	a3a40010 	sb	a0,16(sp)
9d002280:	a3a50010 	sb	a1,16(sp)
9d002284:	a3a40011 	sb	a0,17(sp)
9d002288:	24120002 	li	s2,2
9d00228c:	27b60010 	addiu	s6,sp,16
9d002290:	afa70058 	sw	a3,88(sp)
9d002294:	12a00003 	beqz	s5,9d0022a4 <_vfprintf_cdnopuxX+0x4a4>
9d002298:	32f40008 	andi	s4,s7,0x8
9d00229c:	02b2182b 	sltu	v1,s5,s2
9d0022a0:	02a3900b 	movn	s2,s5,v1
9d0022a4:	0242982b 	sltu	s3,s2,v0
9d0022a8:	00521023 	subu	v0,v0,s2
9d0022ac:	3294ffff 	andi	s4,s4,0xffff
9d0022b0:	0013100a 	movz	v0,zero,s3
9d0022b4:	12800040 	beqz	s4,9d0023b8 <_vfprintf_cdnopuxX+0x5b8>
9d0022b8:	00409821 	move	s3,v0
9d0022bc:	2655ffff 	addiu	s5,s2,-1
9d0022c0:	0b4008b9 	j	9d0022e4 <_vfprintf_cdnopuxX+0x4e4>
9d0022c4:	2412ffff 	li	s2,-1
9d0022c8:	80440000 	lb	a0,0(v0)
9d0022cc:	26d60001 	addiu	s6,s6,1
9d0022d0:	0f400dea 	jal	9d0037a8 <fputc>
9d0022d4:	26b5ffff 	addiu	s5,s5,-1
9d0022d8:	00021027 	nor	v0,zero,v0
9d0022dc:	0002102b 	sltu	v0,zero,v0
9d0022e0:	02028021 	addu	s0,s0,v0
9d0022e4:	02c01021 	move	v0,s6
9d0022e8:	16b2fff7 	bne	s5,s2,9d0022c8 <_vfprintf_cdnopuxX+0x4c8>
9d0022ec:	02202821 	move	a1,s1
9d0022f0:	5280fed3 	beqzl	s4,9d001e40 <_vfprintf_cdnopuxX+0x40>
9d0022f4:	83c40000 	lb	a0,0(s8)
9d0022f8:	0b4008c7 	j	9d00231c <_vfprintf_cdnopuxX+0x51c>
9d0022fc:	24040020 	li	a0,32
9d002300:	0f400dea 	jal	9d0037a8 <fputc>
9d002304:	2673ffff 	addiu	s3,s3,-1
9d002308:	00021027 	nor	v0,zero,v0
9d00230c:	0002102b 	sltu	v0,zero,v0
9d002310:	02028021 	addu	s0,s0,v0
9d002314:	24040020 	li	a0,32
9d002318:	02202821 	move	a1,s1
9d00231c:	1660fff8 	bnez	s3,9d002300 <_vfprintf_cdnopuxX+0x500>
9d002320:	00000000 	nop
9d002324:	0b400790 	j	9d001e40 <_vfprintf_cdnopuxX+0x40>
9d002328:	83c40000 	lb	a0,0(s8)
9d00232c:	a3a30012 	sb	v1,18(sp)
9d002330:	0b4007e9 	j	9d001fa4 <_vfprintf_cdnopuxX+0x1a4>
9d002334:	36f700c0 	ori	s7,s7,0xc0
9d002338:	a3a30012 	sb	v1,18(sp)
9d00233c:	8fa30058 	lw	v1,88(sp)
9d002340:	8c650000 	lw	a1,0(v1)
9d002344:	24660004 	addiu	a2,v1,4
9d002348:	10a00147 	beqz	a1,9d002868 <_vfprintf_cdnopuxX+0xa68>
9d00234c:	00a0b021 	move	s6,a1
9d002350:	80a30000 	lb	v1,0(a1)
9d002354:	10600148 	beqz	v1,9d002878 <_vfprintf_cdnopuxX+0xa78>
9d002358:	24a30001 	addiu	v1,a1,1
9d00235c:	00659023 	subu	s2,v1,a1
9d002360:	24630001 	addiu	v1,v1,1
9d002364:	8064ffff 	lb	a0,-1(v1)
9d002368:	5480fffd 	bnezl	a0,9d002360 <_vfprintf_cdnopuxX+0x560>
9d00236c:	00659023 	subu	s2,v1,a1
9d002370:	0b4008a5 	j	9d002294 <_vfprintf_cdnopuxX+0x494>
9d002374:	afa60058 	sw	a2,88(sp)
9d002378:	32e30010 	andi	v1,s7,0x10
9d00237c:	00a03821 	move	a3,a1
9d002380:	00c3380a 	movz	a3,a2,v1
9d002384:	00f7b825 	or	s7,a3,s7
9d002388:	0b4007db 	j	9d001f6c <_vfprintf_cdnopuxX+0x16c>
9d00238c:	83c30000 	lb	v1,0(s8)
9d002390:	1064010f 	beq	v1,a0,9d0027d0 <_vfprintf_cdnopuxX+0x9d0>
9d002394:	a3a30012 	sb	v1,18(sp)
9d002398:	27b60012 	addiu	s6,sp,18
9d00239c:	0b4008a5 	j	9d002294 <_vfprintf_cdnopuxX+0x494>
9d0023a0:	24120001 	li	s2,1
9d0023a4:	0f400dea 	jal	9d0037a8 <fputc>
9d0023a8:	2673ffff 	addiu	s3,s3,-1
9d0023ac:	00021027 	nor	v0,zero,v0
9d0023b0:	0002102b 	sltu	v0,zero,v0
9d0023b4:	02028021 	addu	s0,s0,v0
9d0023b8:	24040020 	li	a0,32
9d0023bc:	1660fff9 	bnez	s3,9d0023a4 <_vfprintf_cdnopuxX+0x5a4>
9d0023c0:	02202821 	move	a1,s1
9d0023c4:	0b4008af 	j	9d0022bc <_vfprintf_cdnopuxX+0x4bc>
9d0023c8:	2413ffff 	li	s3,-1
9d0023cc:	8c760000 	lw	s6,0(v1)
9d0023d0:	0000a021 	move	s4,zero
9d0023d4:	24630004 	addiu	v1,v1,4
9d0023d8:	0b400800 	j	9d002000 <_vfprintf_cdnopuxX+0x200>
9d0023dc:	afa30058 	sw	v1,88(sp)
9d0023e0:	8c830000 	lw	v1,0(a0)
9d0023e4:	24840004 	addiu	a0,a0,4
9d0023e8:	afa40058 	sw	a0,88(sp)
9d0023ec:	000327c3 	sra	a0,v1,0x1f
9d0023f0:	0060b021 	move	s6,v1
9d0023f4:	0080a021 	move	s4,a0
9d0023f8:	0b4007f9 	j	9d001fe4 <_vfprintf_cdnopuxX+0x1e4>
9d0023fc:	00802821 	move	a1,a0
9d002400:	1240ff0e 	beqz	s2,9d00203c <_vfprintf_cdnopuxX+0x23c>
9d002404:	24030001 	li	v1,1
9d002408:	83b30012 	lb	s3,18(sp)
9d00240c:	0275182a 	slt	v1,s3,s5
9d002410:	1060ff23 	beqz	v1,9d0020a0 <_vfprintf_cdnopuxX+0x2a0>
9d002414:	02b3182a 	slt	v1,s5,s3
9d002418:	7c159c20 	seb	s3,s5
9d00241c:	0b400829 	j	9d0020a4 <_vfprintf_cdnopuxX+0x2a4>
9d002420:	a3b30012 	sb	s3,18(sp)
9d002424:	a3a40010 	sb	a0,16(sp)
9d002428:	24120001 	li	s2,1
9d00242c:	27b60010 	addiu	s6,sp,16
9d002430:	0b4008a5 	j	9d002294 <_vfprintf_cdnopuxX+0x494>
9d002434:	afa70058 	sw	a3,88(sp)
9d002438:	1060001c 	beqz	v1,9d0024ac <_vfprintf_cdnopuxX+0x6ac>
9d00243c:	00539823 	subu	s3,v0,s3
9d002440:	32e20002 	andi	v0,s7,0x2
9d002444:	104000ab 	beqz	v0,9d0026f4 <_vfprintf_cdnopuxX+0x8f4>
9d002448:	32e20001 	andi	v0,s7,0x1
9d00244c:	32e40001 	andi	a0,s7,0x1
9d002450:	2402002d 	li	v0,45
9d002454:	2403002b 	li	v1,43
9d002458:	0064100a 	movz	v0,v1,a0
9d00245c:	00402021 	move	a0,v0
9d002460:	0f400dea 	jal	9d0037a8 <fputc>
9d002464:	02202821 	move	a1,s1
9d002468:	00021027 	nor	v0,zero,v0
9d00246c:	0002102b 	sltu	v0,zero,v0
9d002470:	02028021 	addu	s0,s0,v0
9d002474:	1260000a 	beqz	s3,9d0024a0 <_vfprintf_cdnopuxX+0x6a0>
9d002478:	32e20008 	andi	v0,s7,0x8
9d00247c:	24040030 	li	a0,48
9d002480:	0f400dea 	jal	9d0037a8 <fputc>
9d002484:	02202821 	move	a1,s1
9d002488:	00021027 	nor	v0,zero,v0
9d00248c:	0002102b 	sltu	v0,zero,v0
9d002490:	2673ffff 	addiu	s3,s3,-1
9d002494:	1660fff9 	bnez	s3,9d00247c <_vfprintf_cdnopuxX+0x67c>
9d002498:	02028021 	addu	s0,s0,v0
9d00249c:	32e20008 	andi	v0,s7,0x8
9d0024a0:	3042ffff 	andi	v0,v0,0xffff
9d0024a4:	0b40093e 	j	9d0024f8 <_vfprintf_cdnopuxX+0x6f8>
9d0024a8:	afa20024 	sw	v0,36(sp)
9d0024ac:	32e20008 	andi	v0,s7,0x8
9d0024b0:	3042ffff 	andi	v0,v0,0xffff
9d0024b4:	12600003 	beqz	s3,9d0024c4 <_vfprintf_cdnopuxX+0x6c4>
9d0024b8:	afa20024 	sw	v0,36(sp)
9d0024bc:	10400056 	beqz	v0,9d002618 <_vfprintf_cdnopuxX+0x818>
9d0024c0:	24040020 	li	a0,32
9d0024c4:	32e20002 	andi	v0,s7,0x2
9d0024c8:	10400086 	beqz	v0,9d0026e4 <_vfprintf_cdnopuxX+0x8e4>
9d0024cc:	32e20001 	andi	v0,s7,0x1
9d0024d0:	32e40001 	andi	a0,s7,0x1
9d0024d4:	2402002d 	li	v0,45
9d0024d8:	2403002b 	li	v1,43
9d0024dc:	0064100a 	movz	v0,v1,a0
9d0024e0:	00402021 	move	a0,v0
9d0024e4:	0f400dea 	jal	9d0037a8 <fputc>
9d0024e8:	02202821 	move	a1,s1
9d0024ec:	00021027 	nor	v0,zero,v0
9d0024f0:	0002102b 	sltu	v0,zero,v0
9d0024f4:	02028021 	addu	s0,s0,v0
9d0024f8:	26a9ffff 	addiu	t1,s5,-1
9d0024fc:	0009a8c0 	sll	s5,t1,0x3
9d002500:	00091840 	sll	v1,t1,0x1
9d002504:	32e20020 	andi	v0,s7,0x20
9d002508:	3c049d00 	lui	a0,0x9d00
9d00250c:	24843cd0 	addiu	a0,a0,15568
9d002510:	0095a821 	addu	s5,a0,s5
9d002514:	afb50018 	sw	s5,24(sp)
9d002518:	0069b821 	addu	s7,v1,t1
9d00251c:	00142840 	sll	a1,s4,0x1
9d002520:	afa5001c 	sw	a1,28(sp)
9d002524:	3042ffff 	andi	v0,v0,0xffff
9d002528:	afa20020 	sw	v0,32(sp)
9d00252c:	2402fffd 	li	v0,-3
9d002530:	12e20018 	beq	s7,v0,9d002594 <_vfprintf_cdnopuxX+0x794>
9d002534:	0009a880 	sll	s5,t1,0x2
9d002538:	24020040 	li	v0,64
9d00253c:	12420059 	beq	s2,v0,9d0026a4 <_vfprintf_cdnopuxX+0x8a4>
9d002540:	2e420041 	sltiu	v0,s2,65
9d002544:	14400022 	bnez	v0,9d0025d0 <_vfprintf_cdnopuxX+0x7d0>
9d002548:	24020080 	li	v0,128
9d00254c:	12420043 	beq	s2,v0,9d00265c <_vfprintf_cdnopuxX+0x85c>
9d002550:	00151827 	nor	v1,zero,s5
9d002554:	240200c0 	li	v0,192
9d002558:	12420020 	beq	s2,v0,9d0025dc <_vfprintf_cdnopuxX+0x7dc>
9d00255c:	8fa20018 	lw	v0,24(sp)
9d002560:	83a40012 	lb	a0,18(sp)
9d002564:	0f400dea 	jal	9d0037a8 <fputc>
9d002568:	02202821 	move	a1,s1
9d00256c:	00021027 	nor	v0,zero,v0
9d002570:	0002102b 	sltu	v0,zero,v0
9d002574:	02028021 	addu	s0,s0,v0
9d002578:	8fa70018 	lw	a3,24(sp)
9d00257c:	24e7fff8 	addiu	a3,a3,-8
9d002580:	afa70018 	sw	a3,24(sp)
9d002584:	26f7fffd 	addiu	s7,s7,-3
9d002588:	2402fffd 	li	v0,-3
9d00258c:	16e2ffea 	bne	s7,v0,9d002538 <_vfprintf_cdnopuxX+0x738>
9d002590:	26b5fffc 	addiu	s5,s5,-4
9d002594:	8fa20024 	lw	v0,36(sp)
9d002598:	5040fe29 	beqzl	v0,9d001e40 <_vfprintf_cdnopuxX+0x40>
9d00259c:	83c40000 	lb	a0,0(s8)
9d0025a0:	5a60fe27 	blezl	s3,9d001e40 <_vfprintf_cdnopuxX+0x40>
9d0025a4:	83c40000 	lb	a0,0(s8)
9d0025a8:	24040020 	li	a0,32
9d0025ac:	0f400dea 	jal	9d0037a8 <fputc>
9d0025b0:	02202821 	move	a1,s1
9d0025b4:	00021027 	nor	v0,zero,v0
9d0025b8:	0002102b 	sltu	v0,zero,v0
9d0025bc:	2673ffff 	addiu	s3,s3,-1
9d0025c0:	1660fff9 	bnez	s3,9d0025a8 <_vfprintf_cdnopuxX+0x7a8>
9d0025c4:	02028021 	addu	s0,s0,v0
9d0025c8:	0b400790 	j	9d001e40 <_vfprintf_cdnopuxX+0x40>
9d0025cc:	83c40000 	lb	a0,0(s8)
9d0025d0:	5640ffe4 	bnezl	s2,9d002564 <_vfprintf_cdnopuxX+0x764>
9d0025d4:	83a40012 	lb	a0,18(sp)
9d0025d8:	8fa20018 	lw	v0,24(sp)
9d0025dc:	8c460000 	lw	a2,0(v0)
9d0025e0:	8c470004 	lw	a3,4(v0)
9d0025e4:	02c02021 	move	a0,s6
9d0025e8:	0f400c63 	jal	9d00318c <__udivdi3>
9d0025ec:	02802821 	move	a1,s4
9d0025f0:	00402021 	move	a0,v0
9d0025f4:	00602821 	move	a1,v1
9d0025f8:	2406000a 	li	a2,10
9d0025fc:	0f400a34 	jal	9d0028d0 <.LFE0>
9d002600:	00003821 	move	a3,zero
9d002604:	24420030 	addiu	v0,v0,48
9d002608:	7c022420 	seb	a0,v0
9d00260c:	0b400959 	j	9d002564 <_vfprintf_cdnopuxX+0x764>
9d002610:	a3a40012 	sb	a0,18(sp)
9d002614:	24040020 	li	a0,32
9d002618:	0f400dea 	jal	9d0037a8 <fputc>
9d00261c:	02202821 	move	a1,s1
9d002620:	00021027 	nor	v0,zero,v0
9d002624:	0002102b 	sltu	v0,zero,v0
9d002628:	2673ffff 	addiu	s3,s3,-1
9d00262c:	1260ffa5 	beqz	s3,9d0024c4 <_vfprintf_cdnopuxX+0x6c4>
9d002630:	02028021 	addu	s0,s0,v0
9d002634:	24040020 	li	a0,32
9d002638:	0f400dea 	jal	9d0037a8 <fputc>
9d00263c:	02202821 	move	a1,s1
9d002640:	00021027 	nor	v0,zero,v0
9d002644:	0002102b 	sltu	v0,zero,v0
9d002648:	2673ffff 	addiu	s3,s3,-1
9d00264c:	1660fff1 	bnez	s3,9d002614 <_vfprintf_cdnopuxX+0x814>
9d002650:	02028021 	addu	s0,s0,v0
9d002654:	0b400932 	j	9d0024c8 <_vfprintf_cdnopuxX+0x6c8>
9d002658:	32e20002 	andi	v0,s7,0x2
9d00265c:	8fa4001c 	lw	a0,28(sp)
9d002660:	00641804 	sllv	v1,a0,v1
9d002664:	02b61006 	srlv	v0,s6,s5
9d002668:	32a60020 	andi	a2,s5,0x20
9d00266c:	00621025 	or	v0,v1,v0
9d002670:	02b42806 	srlv	a1,s4,s5
9d002674:	3c079d00 	lui	a3,0x9d00
9d002678:	24e33d78 	addiu	v1,a3,15736
9d00267c:	3c079d00 	lui	a3,0x9d00
9d002680:	24e43d8c 	addiu	a0,a3,15756
9d002684:	00a6100b 	movn	v0,a1,a2
9d002688:	8fa50020 	lw	a1,32(sp)
9d00268c:	0085180a 	movz	v1,a0,a1
9d002690:	3042000f 	andi	v0,v0,0xf
9d002694:	00621821 	addu	v1,v1,v0
9d002698:	80640000 	lb	a0,0(v1)
9d00269c:	0b400959 	j	9d002564 <_vfprintf_cdnopuxX+0x764>
9d0026a0:	a3a40012 	sb	a0,18(sp)
9d0026a4:	00171027 	nor	v0,zero,s7
9d0026a8:	8fa6001c 	lw	a2,28(sp)
9d0026ac:	00461004 	sllv	v0,a2,v0
9d0026b0:	02f62006 	srlv	a0,s6,s7
9d0026b4:	32e30020 	andi	v1,s7,0x20
9d0026b8:	00442025 	or	a0,v0,a0
9d0026bc:	02f41006 	srlv	v0,s4,s7
9d0026c0:	0043200b 	movn	a0,v0,v1
9d0026c4:	30840007 	andi	a0,a0,0x7
9d0026c8:	24840030 	addiu	a0,a0,48
9d0026cc:	0b400959 	j	9d002564 <_vfprintf_cdnopuxX+0x764>
9d0026d0:	a3a40012 	sb	a0,18(sp)
9d0026d4:	50800037 	beqzl	a0,9d0027b4 <_vfprintf_cdnopuxX+0x9b4>
9d0026d8:	000528c0 	sll	a1,a1,0x3
9d0026dc:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d0026e0:	a3b30012 	sb	s3,18(sp)
9d0026e4:	1040ff85 	beqz	v0,9d0024fc <_vfprintf_cdnopuxX+0x6fc>
9d0026e8:	26a9ffff 	addiu	t1,s5,-1
9d0026ec:	0b400939 	j	9d0024e4 <_vfprintf_cdnopuxX+0x6e4>
9d0026f0:	24040020 	li	a0,32
9d0026f4:	1040ff5f 	beqz	v0,9d002474 <_vfprintf_cdnopuxX+0x674>
9d0026f8:	24040020 	li	a0,32
9d0026fc:	0b400918 	j	9d002460 <_vfprintf_cdnopuxX+0x660>
9d002700:	00000000 	nop
9d002704:	12800064 	beqz	s4,9d002898 <_vfprintf_cdnopuxX+0xa98>
9d002708:	a3a30012 	sb	v1,18(sp)
9d00270c:	24030003 	li	v1,3
9d002710:	24130002 	li	s3,2
9d002714:	24050100 	li	a1,256
9d002718:	00002021 	move	a0,zero
9d00271c:	0b4009ca 	j	9d002728 <_vfprintf_cdnopuxX+0x928>
9d002720:	240d0011 	li	t5,17
9d002724:	00c09821 	move	s3,a2
9d002728:	24690001 	addiu	t1,v1,1
9d00272c:	0284382b 	sltu	a3,s4,a0
9d002730:	00056702 	srl	t4,a1,0x1c
9d002734:	7c033420 	seb	a2,v1
9d002738:	00045100 	sll	t2,a0,0x4
9d00273c:	14e0ffe7 	bnez	a3,9d0026dc <_vfprintf_cdnopuxX+0x8dc>
9d002740:	312300ff 	andi	v1,t1,0xff
9d002744:	5094003f 	beql	a0,s4,9d002844 <_vfprintf_cdnopuxX+0xa44>
9d002748:	02c5202b 	sltu	a0,s6,a1
9d00274c:	00052900 	sll	a1,a1,0x4
9d002750:	146dfff4 	bne	v1,t5,9d002724 <_vfprintf_cdnopuxX+0x924>
9d002754:	018a2025 	or	a0,t4,t2
9d002758:	a3a60012 	sb	a2,18(sp)
9d00275c:	0b400824 	j	9d002090 <_vfprintf_cdnopuxX+0x290>
9d002760:	00c09821 	move	s3,a2
9d002764:	24030001 	li	v1,1
9d002768:	12800050 	beqz	s4,9d0028ac <_vfprintf_cdnopuxX+0xaac>
9d00276c:	a3a30012 	sb	v1,18(sp)
9d002770:	24030003 	li	v1,3
9d002774:	24130002 	li	s3,2
9d002778:	24050040 	li	a1,64
9d00277c:	00002021 	move	a0,zero
9d002780:	0b4009e3 	j	9d00278c <_vfprintf_cdnopuxX+0x98c>
9d002784:	240d0016 	li	t5,22
9d002788:	00c09821 	move	s3,a2
9d00278c:	24690001 	addiu	t1,v1,1
9d002790:	0284382b 	sltu	a3,s4,a0
9d002794:	00056742 	srl	t4,a1,0x1d
9d002798:	7c033420 	seb	a2,v1
9d00279c:	000450c0 	sll	t2,a0,0x3
9d0027a0:	14e0ffce 	bnez	a3,9d0026dc <_vfprintf_cdnopuxX+0x8dc>
9d0027a4:	312300ff 	andi	v1,t1,0xff
9d0027a8:	1094ffca 	beq	a0,s4,9d0026d4 <_vfprintf_cdnopuxX+0x8d4>
9d0027ac:	02c5202b 	sltu	a0,s6,a1
9d0027b0:	000528c0 	sll	a1,a1,0x3
9d0027b4:	146dfff4 	bne	v1,t5,9d002788 <_vfprintf_cdnopuxX+0x988>
9d0027b8:	018a2025 	or	a0,t4,t2
9d0027bc:	a3a60012 	sb	a2,18(sp)
9d0027c0:	0b400824 	j	9d002090 <_vfprintf_cdnopuxX+0x290>
9d0027c4:	00c09821 	move	s3,a2
9d0027c8:	1464fef3 	bne	v1,a0,9d002398 <_vfprintf_cdnopuxX+0x598>
9d0027cc:	a3a30012 	sb	v1,18(sp)
9d0027d0:	0b4007e8 	j	9d001fa0 <_vfprintf_cdnopuxX+0x1a0>
9d0027d4:	36f70020 	ori	s7,s7,0x20
9d0027d8:	8fa60058 	lw	a2,88(sp)
9d0027dc:	8cd50000 	lw	s5,0(a2)
9d0027e0:	83c30002 	lb	v1,2(s8)
9d0027e4:	24c60004 	addiu	a2,a2,4
9d0027e8:	afa60058 	sw	a2,88(sp)
9d0027ec:	0b4007d8 	j	9d001f60 <_vfprintf_cdnopuxX+0x160>
9d0027f0:	27de0002 	addiu	s8,s8,2
9d0027f4:	8fa50058 	lw	a1,88(sp)
9d0027f8:	24a40007 	addiu	a0,a1,7
9d0027fc:	2403fff8 	li	v1,-8
9d002800:	00831824 	and	v1,a0,v1
9d002804:	24660008 	addiu	a2,v1,8
9d002808:	afa60058 	sw	a2,88(sp)
9d00280c:	8c760000 	lw	s6,0(v1)
9d002810:	0b400800 	j	9d002000 <_vfprintf_cdnopuxX+0x200>
9d002814:	8c740004 	lw	s4,4(v1)
9d002818:	24c40007 	addiu	a0,a2,7
9d00281c:	2403fff8 	li	v1,-8
9d002820:	00832024 	and	a0,a0,v1
9d002824:	8c850004 	lw	a1,4(a0)
9d002828:	8c830000 	lw	v1,0(a0)
9d00282c:	24840008 	addiu	a0,a0,8
9d002830:	afa40058 	sw	a0,88(sp)
9d002834:	00a02021 	move	a0,a1
9d002838:	0060b021 	move	s6,v1
9d00283c:	0b4007f9 	j	9d001fe4 <_vfprintf_cdnopuxX+0x1e4>
9d002840:	00a0a021 	move	s4,a1
9d002844:	5080ffc2 	beqzl	a0,9d002750 <_vfprintf_cdnopuxX+0x950>
9d002848:	00052900 	sll	a1,a1,0x4
9d00284c:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d002850:	a3b30012 	sb	s3,18(sp)
9d002854:	02c5282b 	sltu	a1,s6,a1
9d002858:	10a0fe09 	beqz	a1,9d002080 <_vfprintf_cdnopuxX+0x280>
9d00285c:	00000000 	nop
9d002860:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d002864:	a3b30012 	sb	s3,18(sp)
9d002868:	3c169d00 	lui	s6,0x9d00
9d00286c:	26d63d70 	addiu	s6,s6,15728
9d002870:	0b4008d4 	j	9d002350 <_vfprintf_cdnopuxX+0x550>
9d002874:	02c02821 	move	a1,s6
9d002878:	afa60058 	sw	a2,88(sp)
9d00287c:	0b4008a5 	j	9d002294 <_vfprintf_cdnopuxX+0x494>
9d002880:	00009021 	move	s2,zero
9d002884:	2ec3000a 	sltiu	v1,s6,10
9d002888:	1060fdef 	beqz	v1,9d002048 <_vfprintf_cdnopuxX+0x248>
9d00288c:	3c049d00 	lui	a0,0x9d00
9d002890:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d002894:	24130001 	li	s3,1
9d002898:	2ec30010 	sltiu	v1,s6,16
9d00289c:	1060ff9c 	beqz	v1,9d002710 <_vfprintf_cdnopuxX+0x910>
9d0028a0:	24030003 	li	v1,3
9d0028a4:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d0028a8:	24130001 	li	s3,1
9d0028ac:	2ec30008 	sltiu	v1,s6,8
9d0028b0:	1060ffb0 	beqz	v1,9d002774 <_vfprintf_cdnopuxX+0x974>
9d0028b4:	24030003 	li	v1,3
9d0028b8:	0b400903 	j	9d00240c <_vfprintf_cdnopuxX+0x60c>
9d0028bc:	24130001 	li	s3,1
9d0028c0:	3042ffff 	andi	v0,v0,0xffff
9d0028c4:	afa20024 	sw	v0,36(sp)
9d0028c8:	0b400931 	j	9d0024c4 <_vfprintf_cdnopuxX+0x6c4>
9d0028cc:	00009821 	move	s3,zero

Disassembly of section .text:

9d0028d0 <__umoddi3>:
9d0028d0:	00c04021 	move	t0,a2
9d0028d4:	00804821 	move	t1,a0
9d0028d8:	14e0003b 	bnez	a3,9d0029c8 <__umoddi3+0xf8>
9d0028dc:	00a01821 	move	v1,a1
9d0028e0:	00a6102b 	sltu	v0,a1,a2
9d0028e4:	10400048 	beqz	v0,9d002a08 <__umoddi3+0x138>
9d0028e8:	70c21020 	clz	v0,a2
9d0028ec:	50400008 	beqzl	v0,9d002910 <__umoddi3+0x40>
9d0028f0:	00083402 	srl	a2,t0,0x10
9d0028f4:	00021823 	negu	v1,v0
9d0028f8:	00452804 	sllv	a1,a1,v0
9d0028fc:	00641806 	srlv	v1,a0,v1
9d002900:	00464004 	sllv	t0,a2,v0
9d002904:	00651825 	or	v1,v1,a1
9d002908:	00444804 	sllv	t1,a0,v0
9d00290c:	00083402 	srl	a2,t0,0x10
9d002910:	0066001b 	divu	zero,v1,a2
9d002914:	00c001f4 	teq	a2,zero,0x7
9d002918:	00002010 	mfhi	a0
9d00291c:	00005812 	mflo	t3
9d002920:	310cffff 	andi	t4,t0,0xffff
9d002924:	00095402 	srl	t2,t1,0x10
9d002928:	716c5802 	mul	t3,t3,t4
9d00292c:	00042400 	sll	a0,a0,0x10
9d002930:	008a5025 	or	t2,a0,t2
9d002934:	014b682b 	sltu	t5,t2,t3
9d002938:	0066001b 	divu	zero,v1,a2
9d00293c:	00c001f4 	teq	a2,zero,0x7
9d002940:	51a00009 	beqzl	t5,9d002968 <__umoddi3+0x98>
9d002944:	014b5023 	subu	t2,t2,t3
9d002948:	01485021 	addu	t2,t2,t0
9d00294c:	0148182b 	sltu	v1,t2,t0
9d002950:	54600005 	bnezl	v1,9d002968 <__umoddi3+0x98>
9d002954:	014b5023 	subu	t2,t2,t3
9d002958:	014b202b 	sltu	a0,t2,t3
9d00295c:	01481821 	addu	v1,t2,t0
9d002960:	0064500b 	movn	t2,v1,a0
9d002964:	014b5023 	subu	t2,t2,t3
9d002968:	3123ffff 	andi	v1,t1,0xffff
9d00296c:	0146001b 	divu	zero,t2,a2
9d002970:	00c001f4 	teq	a2,zero,0x7
9d002974:	00004810 	mfhi	t1
9d002978:	00002012 	mflo	a0
9d00297c:	708c2002 	mul	a0,a0,t4
9d002980:	00094c00 	sll	t1,t1,0x10
9d002984:	01234825 	or	t1,t1,v1
9d002988:	0124182b 	sltu	v1,t1,a0
9d00298c:	0146001b 	divu	zero,t2,a2
9d002990:	00c001f4 	teq	a2,zero,0x7
9d002994:	50600009 	beqzl	v1,9d0029bc <__umoddi3+0xec>
9d002998:	01244823 	subu	t1,t1,a0
9d00299c:	01284821 	addu	t1,t1,t0
9d0029a0:	0128182b 	sltu	v1,t1,t0
9d0029a4:	54600005 	bnezl	v1,9d0029bc <__umoddi3+0xec>
9d0029a8:	01244823 	subu	t1,t1,a0
9d0029ac:	0124182b 	sltu	v1,t1,a0
9d0029b0:	01284021 	addu	t0,t1,t0
9d0029b4:	0103480b 	movn	t1,t0,v1
9d0029b8:	01244823 	subu	t1,t1,a0
9d0029bc:	00491006 	srlv	v0,t1,v0
9d0029c0:	03e00008 	jr	ra
9d0029c4:	00001821 	move	v1,zero
9d0029c8:	00a7102b 	sltu	v0,a1,a3
9d0029cc:	14400047 	bnez	v0,9d002aec <__umoddi3+0x21c>
9d0029d0:	70ea5020 	clz	t2,a3
9d0029d4:	15400048 	bnez	t2,9d002af8 <__umoddi3+0x228>
9d0029d8:	240b0020 	li	t3,32
9d0029dc:	00e5102b 	sltu	v0,a3,a1
9d0029e0:	14400005 	bnez	v0,9d0029f8 <__umoddi3+0x128>
9d0029e4:	00861023 	subu	v0,a0,a2
9d0029e8:	0086402b 	sltu	t0,a0,a2
9d0029ec:	15000089 	bnez	t0,9d002c14 <__umoddi3+0x344>
9d0029f0:	00801021 	move	v0,a0
9d0029f4:	00861023 	subu	v0,a0,a2
9d0029f8:	00a72823 	subu	a1,a1,a3
9d0029fc:	0082202b 	sltu	a0,a0,v0
9d002a00:	03e00008 	jr	ra
9d002a04:	00a41823 	subu	v1,a1,a0
9d002a08:	14c00006 	bnez	a2,9d002a24 <__umoddi3+0x154>
9d002a0c:	71021020 	clz	v0,t0
9d002a10:	24020001 	li	v0,1
9d002a14:	0046001b 	divu	zero,v0,a2
9d002a18:	00c001f4 	teq	a2,zero,0x7
9d002a1c:	00004012 	mflo	t0
9d002a20:	71021020 	clz	v0,t0
9d002a24:	5440007d 	bnezl	v0,9d002c1c <__umoddi3+0x34c>
9d002a28:	00484004 	sllv	t0,t0,v0
9d002a2c:	00a82823 	subu	a1,a1,t0
9d002a30:	00081c02 	srl	v1,t0,0x10
9d002a34:	3107ffff 	andi	a3,t0,0xffff
9d002a38:	00092402 	srl	a0,t1,0x10
9d002a3c:	00a3001b 	divu	zero,a1,v1
9d002a40:	006001f4 	teq	v1,zero,0x7
9d002a44:	00005010 	mfhi	t2
9d002a48:	00003012 	mflo	a2
9d002a4c:	70c73002 	mul	a2,a2,a3
9d002a50:	000a5400 	sll	t2,t2,0x10
9d002a54:	01442025 	or	a0,t2,a0
9d002a58:	0086502b 	sltu	t2,a0,a2
9d002a5c:	00a3001b 	divu	zero,a1,v1
9d002a60:	006001f4 	teq	v1,zero,0x7
9d002a64:	51400009 	beqzl	t2,9d002a8c <__umoddi3+0x1bc>
9d002a68:	00862023 	subu	a0,a0,a2
9d002a6c:	00882021 	addu	a0,a0,t0
9d002a70:	0088282b 	sltu	a1,a0,t0
9d002a74:	54a00005 	bnezl	a1,9d002a8c <__umoddi3+0x1bc>
9d002a78:	00862023 	subu	a0,a0,a2
9d002a7c:	0086502b 	sltu	t2,a0,a2
9d002a80:	00882821 	addu	a1,a0,t0
9d002a84:	00aa200b 	movn	a0,a1,t2
9d002a88:	00862023 	subu	a0,a0,a2
9d002a8c:	3126ffff 	andi	a2,t1,0xffff
9d002a90:	0083001b 	divu	zero,a0,v1
9d002a94:	006001f4 	teq	v1,zero,0x7
9d002a98:	00004810 	mfhi	t1
9d002a9c:	00002812 	mflo	a1
9d002aa0:	70a72802 	mul	a1,a1,a3
9d002aa4:	00094c00 	sll	t1,t1,0x10
9d002aa8:	01264825 	or	t1,t1,a2
9d002aac:	0125302b 	sltu	a2,t1,a1
9d002ab0:	0083001b 	divu	zero,a0,v1
9d002ab4:	006001f4 	teq	v1,zero,0x7
9d002ab8:	50c00009 	beqzl	a2,9d002ae0 <__umoddi3+0x210>
9d002abc:	01254823 	subu	t1,t1,a1
9d002ac0:	01284821 	addu	t1,t1,t0
9d002ac4:	0128182b 	sltu	v1,t1,t0
9d002ac8:	54600005 	bnezl	v1,9d002ae0 <__umoddi3+0x210>
9d002acc:	01254823 	subu	t1,t1,a1
9d002ad0:	0125182b 	sltu	v1,t1,a1
9d002ad4:	01284021 	addu	t0,t1,t0
9d002ad8:	0103480b 	movn	t1,t0,v1
9d002adc:	01254823 	subu	t1,t1,a1
9d002ae0:	00491006 	srlv	v0,t1,v0
9d002ae4:	03e00008 	jr	ra
9d002ae8:	00001821 	move	v1,zero
9d002aec:	00801021 	move	v0,a0
9d002af0:	03e00008 	jr	ra
9d002af4:	00a01821 	move	v1,a1
9d002af8:	016a5823 	subu	t3,t3,t2
9d002afc:	01473804 	sllv	a3,a3,t2
9d002b00:	01661006 	srlv	v0,a2,t3
9d002b04:	00473825 	or	a3,v0,a3
9d002b08:	01656806 	srlv	t5,a1,t3
9d002b0c:	00074c02 	srl	t1,a3,0x10
9d002b10:	01a9001b 	divu	zero,t5,t1
9d002b14:	012001f4 	teq	t1,zero,0x7
9d002b18:	00006010 	mfhi	t4
9d002b1c:	00001812 	mflo	v1
9d002b20:	30eeffff 	andi	t6,a3,0xffff
9d002b24:	01452804 	sllv	a1,a1,t2
9d002b28:	01641006 	srlv	v0,a0,t3
9d002b2c:	00451025 	or	v0,v0,a1
9d002b30:	00022c02 	srl	a1,v0,0x10
9d002b34:	01463004 	sllv	a2,a2,t2
9d002b38:	00004012 	mflo	t0
9d002b3c:	706e7802 	mul	t7,v1,t6
9d002b40:	000c6400 	sll	t4,t4,0x10
9d002b44:	01856025 	or	t4,t4,a1
9d002b48:	018f282b 	sltu	a1,t4,t7
9d002b4c:	01a9001b 	divu	zero,t5,t1
9d002b50:	012001f4 	teq	t1,zero,0x7
9d002b54:	10a0000a 	beqz	a1,9d002b80 <__umoddi3+0x2b0>
9d002b58:	01442004 	sllv	a0,a0,t2
9d002b5c:	01876021 	addu	t4,t4,a3
9d002b60:	0187282b 	sltu	a1,t4,a3
9d002b64:	14a00006 	bnez	a1,9d002b80 <__umoddi3+0x2b0>
9d002b68:	2468ffff 	addiu	t0,v1,-1
9d002b6c:	018f282b 	sltu	a1,t4,t7
9d002b70:	50a00004 	beqzl	a1,9d002b84 <__umoddi3+0x2b4>
9d002b74:	018f6023 	subu	t4,t4,t7
9d002b78:	2468fffe 	addiu	t0,v1,-2
9d002b7c:	01876021 	addu	t4,t4,a3
9d002b80:	018f6023 	subu	t4,t4,t7
9d002b84:	3042ffff 	andi	v0,v0,0xffff
9d002b88:	0189001b 	divu	zero,t4,t1
9d002b8c:	012001f4 	teq	t1,zero,0x7
9d002b90:	00002810 	mfhi	a1
9d002b94:	00001812 	mflo	v1
9d002b98:	00006812 	mflo	t5
9d002b9c:	706e7002 	mul	t6,v1,t6
9d002ba0:	00052c00 	sll	a1,a1,0x10
9d002ba4:	00a21025 	or	v0,a1,v0
9d002ba8:	004e282b 	sltu	a1,v0,t6
9d002bac:	0189001b 	divu	zero,t4,t1
9d002bb0:	012001f4 	teq	t1,zero,0x7
9d002bb4:	50a00006 	beqzl	a1,9d002bd0 <__umoddi3+0x300>
9d002bb8:	00084400 	sll	t0,t0,0x10
9d002bbc:	00471021 	addu	v0,v0,a3
9d002bc0:	0047282b 	sltu	a1,v0,a3
9d002bc4:	10a0004c 	beqz	a1,9d002cf8 <__umoddi3+0x428>
9d002bc8:	246dffff 	addiu	t5,v1,-1
9d002bcc:	00084400 	sll	t0,t0,0x10
9d002bd0:	01a84025 	or	t0,t5,t0
9d002bd4:	004e1023 	subu	v0,v0,t6
9d002bd8:	01060019 	multu	t0,a2
9d002bdc:	00004810 	mfhi	t1
9d002be0:	0049182b 	sltu	v1,v0,t1
9d002be4:	1460003e 	bnez	v1,9d002ce0 <__umoddi3+0x410>
9d002be8:	00004012 	mflo	t0
9d002bec:	1049004b 	beq	v0,t1,9d002d1c <__umoddi3+0x44c>
9d002bf0:	00491823 	subu	v1,v0,t1
9d002bf4:	00003012 	mflo	a2
9d002bf8:	00863023 	subu	a2,a0,a2
9d002bfc:	0086202b 	sltu	a0,a0,a2
9d002c00:	00641823 	subu	v1,v1,a0
9d002c04:	01631004 	sllv	v0,v1,t3
9d002c08:	01463006 	srlv	a2,a2,t2
9d002c0c:	00461025 	or	v0,v0,a2
9d002c10:	01431806 	srlv	v1,v1,t2
9d002c14:	03e00008 	jr	ra
9d002c18:	00000000 	nop
9d002c1c:	24090020 	li	t1,32
9d002c20:	01224823 	subu	t1,t1,v0
9d002c24:	01255006 	srlv	t2,a1,t1
9d002c28:	00081c02 	srl	v1,t0,0x10
9d002c2c:	0143001b 	divu	zero,t2,v1
9d002c30:	006001f4 	teq	v1,zero,0x7
9d002c34:	00003010 	mfhi	a2
9d002c38:	00005812 	mflo	t3
9d002c3c:	3107ffff 	andi	a3,t0,0xffff
9d002c40:	00452804 	sllv	a1,a1,v0
9d002c44:	01244806 	srlv	t1,a0,t1
9d002c48:	01252825 	or	a1,t1,a1
9d002c4c:	00056402 	srl	t4,a1,0x10
9d002c50:	00444804 	sllv	t1,a0,v0
9d002c54:	71675802 	mul	t3,t3,a3
9d002c58:	00063400 	sll	a2,a2,0x10
9d002c5c:	01863025 	or	a2,t4,a2
9d002c60:	00cb202b 	sltu	a0,a2,t3
9d002c64:	0143001b 	divu	zero,t2,v1
9d002c68:	006001f4 	teq	v1,zero,0x7
9d002c6c:	50800006 	beqzl	a0,9d002c88 <__umoddi3+0x3b8>
9d002c70:	00cb3023 	subu	a2,a2,t3
9d002c74:	00c83021 	addu	a2,a2,t0
9d002c78:	00c8202b 	sltu	a0,a2,t0
9d002c7c:	10800024 	beqz	a0,9d002d10 <__umoddi3+0x440>
9d002c80:	00cb502b 	sltu	t2,a2,t3
9d002c84:	00cb3023 	subu	a2,a2,t3
9d002c88:	30aaffff 	andi	t2,a1,0xffff
9d002c8c:	00c3001b 	divu	zero,a2,v1
9d002c90:	006001f4 	teq	v1,zero,0x7
9d002c94:	00002010 	mfhi	a0
9d002c98:	00002812 	mflo	a1
9d002c9c:	70a72802 	mul	a1,a1,a3
9d002ca0:	00042400 	sll	a0,a0,0x10
9d002ca4:	008a2025 	or	a0,a0,t2
9d002ca8:	0085502b 	sltu	t2,a0,a1
9d002cac:	00c3001b 	divu	zero,a2,v1
9d002cb0:	006001f4 	teq	v1,zero,0x7
9d002cb4:	5140ff60 	beqzl	t2,9d002a38 <__umoddi3+0x168>
9d002cb8:	00852823 	subu	a1,a0,a1
9d002cbc:	00882021 	addu	a0,a0,t0
9d002cc0:	0088302b 	sltu	a2,a0,t0
9d002cc4:	54c0ff5c 	bnezl	a2,9d002a38 <__umoddi3+0x168>
9d002cc8:	00852823 	subu	a1,a0,a1
9d002ccc:	0085502b 	sltu	t2,a0,a1
9d002cd0:	00883021 	addu	a2,a0,t0
9d002cd4:	00ca200b 	movn	a0,a2,t2
9d002cd8:	0b400a8e 	j	9d002a38 <__umoddi3+0x168>
9d002cdc:	00852823 	subu	a1,a0,a1
9d002ce0:	01063023 	subu	a2,t0,a2
9d002ce4:	01271823 	subu	v1,t1,a3
9d002ce8:	0106402b 	sltu	t0,t0,a2
9d002cec:	00681823 	subu	v1,v1,t0
9d002cf0:	0b400afe 	j	9d002bf8 <__umoddi3+0x328>
9d002cf4:	00431823 	subu	v1,v0,v1
9d002cf8:	004e282b 	sltu	a1,v0,t6
9d002cfc:	50a0ffb4 	beqzl	a1,9d002bd0 <__umoddi3+0x300>
9d002d00:	00084400 	sll	t0,t0,0x10
9d002d04:	246dfffe 	addiu	t5,v1,-2
9d002d08:	0b400af3 	j	9d002bcc <__umoddi3+0x2fc>
9d002d0c:	00471021 	addu	v0,v0,a3
9d002d10:	00c82021 	addu	a0,a2,t0
9d002d14:	0b400b21 	j	9d002c84 <__umoddi3+0x3b4>
9d002d18:	008a300b 	movn	a2,a0,t2
9d002d1c:	0088182b 	sltu	v1,a0,t0
9d002d20:	5460fff0 	bnezl	v1,9d002ce4 <__umoddi3+0x414>
9d002d24:	01063023 	subu	a2,t0,a2
9d002d28:	00003012 	mflo	a2
9d002d2c:	0b400afe 	j	9d002bf8 <__umoddi3+0x328>
9d002d30:	00001821 	move	v1,zero

// wait for the peripheral master port (PMP) to be ready
// should be called before every read and write operation
static void waitPMP(void)
{
  while(PMMODEbits.BUSY) { ; }
9d002d34:	3c03bf80 	lui	v1,0xbf80
9d002d38:	8c627010 	lw	v0,28688(v1)
9d002d3c:	30428000 	andi	v0,v0,0x8000
9d002d40:	1440fffd 	bnez	v0,9d002d38 <__umoddi3+0x468>
9d002d44:	00000000 	nop
}
9d002d48:	03e00008 	jr	ra
9d002d4c:	00000000 	nop

9d002d50 <LCD_Setup>:
// pins RE0 - RE7 (PMD0 - PMD7) connect to LCD pins D0 - D7
// pin RD4 (PMENB) connects to LCD pin E
// pin RD5 (PMRD/PMWR) Connects to LCD pin R/W
// pin RB13 (PMA10) Connects to RS.
// interrupts will be disabled while this function executes
void LCD_Setup() {
9d002d50:	27bdffe8 	addiu	sp,sp,-24
9d002d54:	afbf0014 	sw	ra,20(sp)
9d002d58:	afb00010 	sw	s0,16(sp)
  int en = __builtin_disable_interrupts();  // disable interrupts, remember initial state
9d002d5c:	41706000 	di	s0
9d002d60:	000000c0 	ehb
  
  IEC1bits.PMPIE = 0;    // disable PMP interrupts
9d002d64:	3c02bf88 	lui	v0,0xbf88
9d002d68:	8c431070 	lw	v1,4208(v0)
9d002d6c:	7c031084 	ins	v1,zero,0x2,0x1
9d002d70:	ac431070 	sw	v1,4208(v0)
  PMCON = 0;             // clear PMCON, like it is on reset
9d002d74:	3c02bf80 	lui	v0,0xbf80
9d002d78:	ac407000 	sw	zero,28672(v0)
  PMCONbits.PTWREN = 1;  // PMENB strobe enabled
9d002d7c:	3c02bf80 	lui	v0,0xbf80
9d002d80:	94437000 	lhu	v1,28672(v0)
9d002d84:	24040001 	li	a0,1
9d002d88:	7c834a44 	ins	v1,a0,0x9,0x1
9d002d8c:	a4437000 	sh	v1,28672(v0)
  PMCONbits.PTRDEN = 1;  // PMRD/PMWR enabled
9d002d90:	94437000 	lhu	v1,28672(v0)
9d002d94:	7c834204 	ins	v1,a0,0x8,0x1
9d002d98:	a4437000 	sh	v1,28672(v0)
  PMCONbits.WRSP = 1;    // Read/write strobe is active high
9d002d9c:	94437000 	lhu	v1,28672(v0)
9d002da0:	7c830844 	ins	v1,a0,0x1,0x1
9d002da4:	a4437000 	sh	v1,28672(v0)
  PMCONbits.RDSP = 1;    // Read/write strobe is active high
9d002da8:	94437000 	lhu	v1,28672(v0)
9d002dac:	7c830004 	ins	v1,a0,0x0,0x1
9d002db0:	a4437000 	sh	v1,28672(v0)

  PMMODE = 0;            // clear PMMODE like it is on reset
9d002db4:	3c03bf80 	lui	v1,0xbf80
9d002db8:	ac607010 	sw	zero,28688(v1)
  PMMODEbits.MODE = 0x3; // set master mode 1, which uses a single strobe
9d002dbc:	3c03bf80 	lui	v1,0xbf80
9d002dc0:	94657010 	lhu	a1,28688(v1)
9d002dc4:	24060003 	li	a2,3
9d002dc8:	7cc54a04 	ins	a1,a2,0x8,0x2
9d002dcc:	a4657010 	sh	a1,28688(v1)
  // The cycle is started when reading from or writing to the PMDIN SFR.
  // Note that the wait states for writes start with minimum of 1 (except WAITE)
  // We add some extra wait states to make sure we meet the time and
  // account for variations in timing amongst different HD44780 compatible parts.
  // The timing we use here is for the KS066U which is faster than the HD44780.
  PMMODEbits.WAITB = 0x3;  // Tas in the LCD datasheet is 60 ns 
9d002dd0:	94657010 	lhu	a1,28688(v1)
9d002dd4:	7cc53984 	ins	a1,a2,0x6,0x2
9d002dd8:	a4657010 	sh	a1,28688(v1)
  PMMODEbits.WAITM = 0xF;  // PWeh in the data sheet is 230 ns (we don't quite meet this)
9d002ddc:	94657010 	lhu	a1,28688(v1)
9d002de0:	2406000f 	li	a2,15
9d002de4:	7cc52884 	ins	a1,a2,0x2,0x4
9d002de8:	a4657010 	sh	a1,28688(v1)
                           // If not working for your LCD you may need to reduce PBCLK
  PMMODEbits.WAITE = 0x1;  // after E is low wait Tah (10ns)
9d002dec:	94657010 	lhu	a1,28688(v1)
9d002df0:	7c850804 	ins	a1,a0,0x0,0x2
9d002df4:	a4657010 	sh	a1,28688(v1)

  PMAEN |= 1 << PMABIT;   // PMA is an address line
9d002df8:	3c03bf80 	lui	v1,0xbf80
9d002dfc:	8c657050 	lw	a1,28752(v1)
9d002e00:	34a50400 	ori	a1,a1,0x400
9d002e04:	ac657050 	sw	a1,28752(v1)
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
9d002e08:	94437000 	lhu	v1,28672(v0)
9d002e0c:	7c837bc4 	ins	v1,a0,0xf,0x1
9d002e10:	a4437000 	sh	v1,28672(v0)
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d002e14:	00002021 	move	a0,zero
9d002e18:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002e1c:	24050038 	li	a1,56
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d002e20:	00002021 	move	a0,zero
9d002e24:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002e28:	2405000c 	li	a1,12
  
  PMCONbits.ON = 1;        // enable the PMP peripheral
  // perform the initialization sequence
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
9d002e2c:	0f400b97 	jal	9d002e5c <LCD_Clear>
9d002e30:	32100001 	andi	s0,s0,0x1
// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
  LCD_Write(0, 0x04 | (id << 1) | s);
9d002e34:	00002021 	move	a0,zero
9d002e38:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002e3c:	24050006 	li	a1,6
  LCD_Function(1,0);       // 2 line mode, small font
  LCD_Display(1, 0, 0);    // Display control: display on, cursor off, blinking cursor off
  LCD_Clear();             // clear the LCD 
  LCD_Entry(1, 0);         // Cursor moves left to right. do not shift the display
  
  if(en & 0x1)             // if interrupts were enabled before, re-enable them
9d002e40:	12000003 	beqz	s0,9d002e50 <LCD_Setup+0x100>
9d002e44:	8fbf0014 	lw	ra,20(sp)
  {
    __builtin_enable_interrupts();
9d002e48:	41626020 	ei	v0
  }
}
9d002e4c:	8fbf0014 	lw	ra,20(sp)
9d002e50:	8fb00010 	lw	s0,16(sp)
9d002e54:	03e00008 	jr	ra
9d002e58:	27bd0018 	addiu	sp,sp,24

9d002e5c <LCD_Clear>:

// Clears the display and returns to the home position (0,0)
void LCD_Clear(void) {
9d002e5c:	27bdffe8 	addiu	sp,sp,-24
9d002e60:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x01); //clear the whole screen
9d002e64:	00002021 	move	a0,zero
9d002e68:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002e6c:	24050001 	li	a1,1
}
9d002e70:	8fbf0014 	lw	ra,20(sp)
9d002e74:	03e00008 	jr	ra
9d002e78:	27bd0018 	addiu	sp,sp,24

9d002e7c <LCD_Home>:

// Return the cursor and display to the home position (0,0)
void LCD_Home(void) {
9d002e7c:	27bdffe8 	addiu	sp,sp,-24
9d002e80:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x02);
9d002e84:	00002021 	move	a0,zero
9d002e88:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002e8c:	24050002 	li	a1,2
}
9d002e90:	8fbf0014 	lw	ra,20(sp)
9d002e94:	03e00008 	jr	ra
9d002e98:	27bd0018 	addiu	sp,sp,24

9d002e9c <LCD_Entry>:

// Issue the LCD entry mode set command
// This tells the LCD what to do after writing a character
// id : 1 increment cursor, 0 decrement cursor
// s : 1 shift display right, 0 don't shift display
void LCD_Entry(int id, int s) {
9d002e9c:	27bdffe8 	addiu	sp,sp,-24
9d002ea0:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x04 | (id << 1) | s);
9d002ea4:	34a50004 	ori	a1,a1,0x4
9d002ea8:	00042040 	sll	a0,a0,0x1
9d002eac:	00a42825 	or	a1,a1,a0
9d002eb0:	00002021 	move	a0,zero
9d002eb4:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002eb8:	30a500ff 	andi	a1,a1,0xff
}
9d002ebc:	8fbf0014 	lw	ra,20(sp)
9d002ec0:	03e00008 	jr	ra
9d002ec4:	27bd0018 	addiu	sp,sp,24

9d002ec8 <LCD_Display>:
// Issue the LCD Display command
// Changes display settings
// d : 1 display on, 0 display off
// c : 1 cursor on, 0 cursor off
// b : 1 cursor blinks, 0 cursor doesn't blink
void LCD_Display(int d, int c, int b) {
9d002ec8:	27bdffe8 	addiu	sp,sp,-24
9d002ecc:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x08 | (d << 2) | (c << 1) | b);
9d002ed0:	34c60008 	ori	a2,a2,0x8
9d002ed4:	00052840 	sll	a1,a1,0x1
9d002ed8:	00c53025 	or	a2,a2,a1
9d002edc:	00042080 	sll	a0,a0,0x2
9d002ee0:	00c42825 	or	a1,a2,a0
9d002ee4:	00002021 	move	a0,zero
9d002ee8:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002eec:	30a500ff 	andi	a1,a1,0xff
}
9d002ef0:	8fbf0014 	lw	ra,20(sp)
9d002ef4:	03e00008 	jr	ra
9d002ef8:	27bd0018 	addiu	sp,sp,24

9d002efc <LCD_Shift>:

// Issue the LCD display shift command
// Move the cursor or the display right or left
// sc : 0 shift cursor, 1 shift display
// rl : 0 to the left, 1 to the right
void LCD_Shift(int sc, int rl) {
9d002efc:	27bdffe8 	addiu	sp,sp,-24
9d002f00:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0,0x1 | (sc << 3) | (rl << 2));
9d002f04:	00052880 	sll	a1,a1,0x2
9d002f08:	34a50001 	ori	a1,a1,0x1
9d002f0c:	000420c0 	sll	a0,a0,0x3
9d002f10:	00a42825 	or	a1,a1,a0
9d002f14:	00002021 	move	a0,zero
9d002f18:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002f1c:	30a500fd 	andi	a1,a1,0xfd
}
9d002f20:	8fbf0014 	lw	ra,20(sp)
9d002f24:	03e00008 	jr	ra
9d002f28:	27bd0018 	addiu	sp,sp,24

9d002f2c <LCD_Function>:
// Issue the LCD Functions set command
// This controls some LCD settings
// You may want to clear the screen after calling this
// n : 0 one line, 1 two lines
// f : 0 small font, 1 large font (only if n == 0)
void LCD_Function(int n, int f) {
9d002f2c:	27bdffe8 	addiu	sp,sp,-24
9d002f30:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x30 | (n << 3) | (f << 2));
9d002f34:	00052880 	sll	a1,a1,0x2
9d002f38:	34a50030 	ori	a1,a1,0x30
9d002f3c:	000420c0 	sll	a0,a0,0x3
9d002f40:	00a42825 	or	a1,a1,a0
9d002f44:	00002021 	move	a0,zero
9d002f48:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002f4c:	30a500fc 	andi	a1,a1,0xfc
}
9d002f50:	8fbf0014 	lw	ra,20(sp)
9d002f54:	03e00008 	jr	ra
9d002f58:	27bd0018 	addiu	sp,sp,24

9d002f5c <LCD_Move>:

// Move the cursor to the desired line and column
// Does this by issuing a DDRAM Move instruction
// line : line 0 or line 1
// col  : the desired column
void LCD_Move(int line, int col) {
9d002f5c:	27bdffe8 	addiu	sp,sp,-24
9d002f60:	afbf0014 	sw	ra,20(sp)
  LCD_Write(0, 0x80 | (line << 6) | col);
9d002f64:	2402ff80 	li	v0,-128
9d002f68:	00a22825 	or	a1,a1,v0
9d002f6c:	00042180 	sll	a0,a0,0x6
9d002f70:	00a42825 	or	a1,a1,a0
9d002f74:	00002021 	move	a0,zero
9d002f78:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002f7c:	30a500ff 	andi	a1,a1,0xff
}
9d002f80:	8fbf0014 	lw	ra,20(sp)
9d002f84:	03e00008 	jr	ra
9d002f88:	27bd0018 	addiu	sp,sp,24

9d002f8c <LCD_CMove>:

// Sets the CGRAM address, used for creating custom
// characters
// addr address in the CGRAM to make current
void LCD_CMove(unsigned char addr) {
9d002f8c:	27bdffe8 	addiu	sp,sp,-24
9d002f90:	afbf0014 	sw	ra,20(sp)
9d002f94:	308500ff 	andi	a1,a0,0xff
  LCD_Write(0, 0x40 | addr);
9d002f98:	00002021 	move	a0,zero
9d002f9c:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002fa0:	34a50040 	ori	a1,a1,0x40
}
9d002fa4:	8fbf0014 	lw	ra,20(sp)
9d002fa8:	03e00008 	jr	ra
9d002fac:	27bd0018 	addiu	sp,sp,24

9d002fb0 <LCD_WriteChar>:

// Writes the character to the LCD at the current position
void LCD_WriteChar(char c) {         
9d002fb0:	27bdffe8 	addiu	sp,sp,-24
9d002fb4:	afbf0014 	sw	ra,20(sp)
  LCD_Write(1, c); 
9d002fb8:	308500ff 	andi	a1,a0,0xff
9d002fbc:	0f400c1f 	jal	9d00307c <LCD_Write>
9d002fc0:	24040001 	li	a0,1
}
9d002fc4:	8fbf0014 	lw	ra,20(sp)
9d002fc8:	03e00008 	jr	ra
9d002fcc:	27bd0018 	addiu	sp,sp,24

9d002fd0 <LCD_WriteString>:

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
9d002fd0:	27bdffe8 	addiu	sp,sp,-24
9d002fd4:	afbf0014 	sw	ra,20(sp)
9d002fd8:	afb00010 	sw	s0,16(sp)
9d002fdc:	00808021 	move	s0,a0
  while(*str) {
9d002fe0:	80840000 	lb	a0,0(a0)
9d002fe4:	10800006 	beqz	a0,9d003000 <LCD_WriteString+0x30>
9d002fe8:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
9d002fec:	0f400bec 	jal	9d002fb0 <LCD_WriteChar>
9d002ff0:	26100001 	addiu	s0,s0,1
  LCD_Write(1, c); 
}

// Write a string to the LCD starting at the current cursor
void LCD_WriteString(const char *str) {
  while(*str) {
9d002ff4:	82040000 	lb	a0,0(s0)
9d002ff8:	1480fffc 	bnez	a0,9d002fec <LCD_WriteString+0x1c>
9d002ffc:	8fbf0014 	lw	ra,20(sp)
    LCD_WriteChar(*str); // increment string pointer after char sent
    ++str;
  }
}
9d003000:	8fb00010 	lw	s0,16(sp)
9d003004:	03e00008 	jr	ra
9d003008:	27bd0018 	addiu	sp,sp,24

9d00300c <LCD_CustomChar>:
// Make val a custom character.  This only implements 
// The small font version
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
9d00300c:	27bdffd8 	addiu	sp,sp,-40
9d003010:	afbf0024 	sw	ra,36(sp)
9d003014:	afb30020 	sw	s3,32(sp)
9d003018:	afb2001c 	sw	s2,28(sp)
9d00301c:	afb10018 	sw	s1,24(sp)
9d003020:	afb00014 	sw	s0,20(sp)
9d003024:	00a09821 	move	s3,a1
  int i = 0;
  for(i = 0; i < 7; ++i) {
    LCD_CMove(((val & 7) << 2) | i);
9d003028:	30840007 	andi	a0,a0,0x7
9d00302c:	00049080 	sll	s2,a0,0x2
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d003030:	00008021 	move	s0,zero
9d003034:	24110007 	li	s1,7
    LCD_CMove(((val & 7) << 2) | i);
9d003038:	02502025 	or	a0,s2,s0
9d00303c:	0f400be3 	jal	9d002f8c <LCD_CMove>
9d003040:	308400ff 	andi	a0,a0,0xff
9d003044:	02701021 	addu	v0,s3,s0
    LCD_Write(1, data[i]);
9d003048:	24040001 	li	a0,1
9d00304c:	0f400c1f 	jal	9d00307c <LCD_Write>
9d003050:	90450000 	lbu	a1,0(v0)
// val : between 0 and 7
// data : 7 character array.  The first 5 bits of each character
//        determine whether that pixel is on or off
void LCD_CustomChar(unsigned char val, const char * data) {
  int i = 0;
  for(i = 0; i < 7; ++i) {
9d003054:	26100001 	addiu	s0,s0,1
9d003058:	1611fff8 	bne	s0,s1,9d00303c <LCD_CustomChar+0x30>
9d00305c:	02502025 	or	a0,s2,s0
    LCD_CMove(((val & 7) << 2) | i);
    LCD_Write(1, data[i]);
  }
}
9d003060:	8fbf0024 	lw	ra,36(sp)
9d003064:	8fb30020 	lw	s3,32(sp)
9d003068:	8fb2001c 	lw	s2,28(sp)
9d00306c:	8fb10018 	lw	s1,24(sp)
9d003070:	8fb00014 	lw	s0,20(sp)
9d003074:	03e00008 	jr	ra
9d003078:	27bd0028 	addiu	sp,sp,40

9d00307c <LCD_Write>:

// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
9d00307c:	27bdffd8 	addiu	sp,sp,-40
9d003080:	afbf0024 	sw	ra,36(sp)
9d003084:	afb10020 	sw	s1,32(sp)
9d003088:	afb0001c 	sw	s0,28(sp)
9d00308c:	00808021 	move	s0,a0
9d003090:	30b100ff 	andi	s1,a1,0xff
}

// wait for the LCD to finish its command.
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
9d003094:	2402ff80 	li	v0,-128
9d003098:	a3a20010 	sb	v0,16(sp)
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d00309c:	93a20010 	lbu	v0,16(sp)
9d0030a0:	7c021420 	seb	v0,v0
9d0030a4:	04410008 	bgez	v0,9d0030c8 <LCD_Write+0x4c>
9d0030a8:	24020032 	li	v0,50
    val = LCD_Read(0);
9d0030ac:	0f400c47 	jal	9d00311c <LCD_Read>
9d0030b0:	00002021 	move	a0,zero
9d0030b4:	a3a20010 	sb	v0,16(sp)
// We check this by reading from the LCD
static void waitLCD() {
  volatile unsigned char val = 0x80;
  
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
9d0030b8:	93a20010 	lbu	v0,16(sp)
9d0030bc:	7c021420 	seb	v0,v0
9d0030c0:	0440fffa 	bltz	v0,9d0030ac <LCD_Write+0x30>
9d0030c4:	24020032 	li	v0,50
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
    _nop();
9d0030c8:	00000040 	ssnop
9d0030cc:	2442ffff 	addiu	v0,v0,-1
  // Read from the LCD until the Busy flag (BF, 7th bit) is 0
  while (val & 0x80) {
    val = LCD_Read(0);
  }
  int i = 0;
  for(i = 0; i < 50; ++i) { // slight delay
9d0030d0:	1440fffd 	bnez	v0,9d0030c8 <LCD_Write+0x4c>
9d0030d4:	00000000 	nop
// Write data to the LCD and wait for it to finish by checking the busy flag. 
// rs : the value of the RS signal, 0 for an instruction 1 for data
// data : the byte to send
void LCD_Write(int rs, unsigned char data) {
  waitLCD();           // wait for the LCD to be ready
  if(rs) { // 1 for data
9d0030d8:	12000004 	beqz	s0,9d0030ec <LCD_Write+0x70>
9d0030dc:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d0030e0:	3c02bf80 	lui	v0,0xbf80
9d0030e4:	0b400c3d 	j	9d0030f4 <LCD_Write+0x78>
9d0030e8:	ac437028 	sw	v1,28712(v0)
  } else { // 0 for command
    PMADDRCLR = 1 << PMABIT; 
9d0030ec:	3c02bf80 	lui	v0,0xbf80
9d0030f0:	ac437024 	sw	v1,28708(v0)
  }
  waitPMP();           // Wait for the PMP to be ready
9d0030f4:	0f400b4d 	jal	9d002d34 <__umoddi3+0x464>
9d0030f8:	00000000 	nop
  PMDIN = data;        // send the data
9d0030fc:	3c02bf80 	lui	v0,0xbf80
9d003100:	ac517040 	sw	s1,28736(v0)
}
9d003104:	0b400c43 	j	9d00310c <LCD_Write+0x90>
9d003108:	8fbf0024 	lw	ra,36(sp)
9d00310c:	8fb10020 	lw	s1,32(sp)
9d003110:	8fb0001c 	lw	s0,28(sp)
9d003114:	03e00008 	jr	ra
9d003118:	27bd0028 	addiu	sp,sp,40

9d00311c <LCD_Read>:

// read data from the LCD.  
// rs : the value of the RS signal 0 for instructions status, 1 for data
unsigned char LCD_Read(int rs) {
9d00311c:	27bdffe0 	addiu	sp,sp,-32
9d003120:	afbf001c 	sw	ra,28(sp)
9d003124:	afb00018 	sw	s0,24(sp)
  volatile unsigned char val = 0; // volatile so 1st read doesn't get optimized away
9d003128:	a3a00010 	sb	zero,16(sp)
  if(rs) { // 1 to read data
9d00312c:	10800005 	beqz	a0,9d003144 <LCD_Read+0x28>
9d003130:	24030400 	li	v1,1024
    PMADDRSET = 1 << PMABIT;
9d003134:	3c02bf80 	lui	v0,0xbf80
9d003138:	ac437028 	sw	v1,28712(v0)
9d00313c:	0b400c53 	j	9d00314c <LCD_Read+0x30>
9d003140:	00000000 	nop
  } else { // 0 to read command status
    PMADDRCLR = 1 << PMABIT;
9d003144:	3c02bf80 	lui	v0,0xbf80
9d003148:	ac437024 	sw	v1,28708(v0)
  }
  // from the PIC32 reference manual, you must read twice to actually get the data
  waitPMP();                  // wait for the PMP to be ready
9d00314c:	0f400b4d 	jal	9d002d34 <__umoddi3+0x464>
9d003150:	3c10bf80 	lui	s0,0xbf80
  val = PMDIN;
9d003154:	8e027040 	lw	v0,28736(s0)
9d003158:	304200ff 	andi	v0,v0,0xff
9d00315c:	a3a20010 	sb	v0,16(sp)
  waitPMP();
9d003160:	0f400b4d 	jal	9d002d34 <__umoddi3+0x464>
9d003164:	00000000 	nop
  val = PMDIN;
9d003168:	8e027040 	lw	v0,28736(s0)
9d00316c:	304200ff 	andi	v0,v0,0xff
9d003170:	a3a20010 	sb	v0,16(sp)
  return val;
9d003174:	93a20010 	lbu	v0,16(sp)
}
9d003178:	304200ff 	andi	v0,v0,0xff
9d00317c:	8fbf001c 	lw	ra,28(sp)
9d003180:	8fb00018 	lw	s0,24(sp)
9d003184:	03e00008 	jr	ra
9d003188:	27bd0020 	addiu	sp,sp,32

9d00318c <__udivdi3>:
9d00318c:	00c04021 	move	t0,a2
9d003190:	00801021 	move	v0,a0
9d003194:	14e0003f 	bnez	a3,9d003294 <__udivdi3+0x108>
9d003198:	00a04821 	move	t1,a1
9d00319c:	00a6182b 	sltu	v1,a1,a2
9d0031a0:	10600047 	beqz	v1,9d0032c0 <__udivdi3+0x134>
9d0031a4:	70c31820 	clz	v1,a2
9d0031a8:	50600008 	beqzl	v1,9d0031cc <__udivdi3+0x40>
9d0031ac:	00081c02 	srl	v1,t0,0x10
9d0031b0:	00034823 	negu	t1,v1
9d0031b4:	00652804 	sllv	a1,a1,v1
9d0031b8:	01244806 	srlv	t1,a0,t1
9d0031bc:	00664004 	sllv	t0,a2,v1
9d0031c0:	01254825 	or	t1,t1,a1
9d0031c4:	00641004 	sllv	v0,a0,v1
9d0031c8:	00081c02 	srl	v1,t0,0x10
9d0031cc:	0123001b 	divu	zero,t1,v1
9d0031d0:	006001f4 	teq	v1,zero,0x7
9d0031d4:	00006010 	mfhi	t4
9d0031d8:	00005812 	mflo	t3
9d0031dc:	310affff 	andi	t2,t0,0xffff
9d0031e0:	00022402 	srl	a0,v0,0x10
9d0031e4:	00003012 	mflo	a2
9d0031e8:	716a3802 	mul	a3,t3,t2
9d0031ec:	000c6400 	sll	t4,t4,0x10
9d0031f0:	01842025 	or	a0,t4,a0
9d0031f4:	0087602b 	sltu	t4,a0,a3
9d0031f8:	0123001b 	divu	zero,t1,v1
9d0031fc:	006001f4 	teq	v1,zero,0x7
9d003200:	1180000b 	beqz	t4,9d003230 <__udivdi3+0xa4>
9d003204:	00872823 	subu	a1,a0,a3
9d003208:	00882021 	addu	a0,a0,t0
9d00320c:	0088282b 	sltu	a1,a0,t0
9d003210:	14a00006 	bnez	a1,9d00322c <__udivdi3+0xa0>
9d003214:	2566ffff 	addiu	a2,t3,-1
9d003218:	0087282b 	sltu	a1,a0,a3
9d00321c:	10a00004 	beqz	a1,9d003230 <__udivdi3+0xa4>
9d003220:	00872823 	subu	a1,a0,a3
9d003224:	2566fffe 	addiu	a2,t3,-2
9d003228:	00882021 	addu	a0,a0,t0
9d00322c:	00872823 	subu	a1,a0,a3
9d003230:	3042ffff 	andi	v0,v0,0xffff
9d003234:	00a3001b 	divu	zero,a1,v1
9d003238:	006001f4 	teq	v1,zero,0x7
9d00323c:	00004810 	mfhi	t1
9d003240:	00003812 	mflo	a3
9d003244:	00002012 	mflo	a0
9d003248:	70ea5002 	mul	t2,a3,t2
9d00324c:	00094c00 	sll	t1,t1,0x10
9d003250:	01221025 	or	v0,t1,v0
9d003254:	004a482b 	sltu	t1,v0,t2
9d003258:	00a3001b 	divu	zero,a1,v1
9d00325c:	006001f4 	teq	v1,zero,0x7
9d003260:	51200009 	beqzl	t1,9d003288 <__udivdi3+0xfc>
9d003264:	00061400 	sll	v0,a2,0x10
9d003268:	00481021 	addu	v0,v0,t0
9d00326c:	0048402b 	sltu	t0,v0,t0
9d003270:	15000004 	bnez	t0,9d003284 <__udivdi3+0xf8>
9d003274:	24e4ffff 	addiu	a0,a3,-1
9d003278:	004a502b 	sltu	t2,v0,t2
9d00327c:	24e7fffe 	addiu	a3,a3,-2
9d003280:	00ea200b 	movn	a0,a3,t2
9d003284:	00061400 	sll	v0,a2,0x10
9d003288:	00821025 	or	v0,a0,v0
9d00328c:	03e00008 	jr	ra
9d003290:	00001821 	move	v1,zero
9d003294:	00a7102b 	sltu	v0,a1,a3
9d003298:	14400044 	bnez	v0,9d0033ac <__udivdi3+0x220>
9d00329c:	70e84020 	clz	t0,a3
9d0032a0:	55000045 	bnezl	t0,9d0033b8 <__udivdi3+0x22c>
9d0032a4:	24020020 	li	v0,32
9d0032a8:	00e5282b 	sltu	a1,a3,a1
9d0032ac:	14a000c8 	bnez	a1,9d0035d0 <__udivdi3+0x444>
9d0032b0:	0086302b 	sltu	a2,a0,a2
9d0032b4:	38c20001 	xori	v0,a2,0x1
9d0032b8:	03e00008 	jr	ra
9d0032bc:	00001821 	move	v1,zero
9d0032c0:	14c00006 	bnez	a2,9d0032dc <__udivdi3+0x150>
9d0032c4:	71031820 	clz	v1,t0
9d0032c8:	24030001 	li	v1,1
9d0032cc:	0066001b 	divu	zero,v1,a2
9d0032d0:	00c001f4 	teq	a2,zero,0x7
9d0032d4:	00004012 	mflo	t0
9d0032d8:	71031820 	clz	v1,t0
9d0032dc:	5460007b 	bnezl	v1,9d0034cc <__udivdi3+0x340>
9d0032e0:	00684004 	sllv	t0,t0,v1
9d0032e4:	00a82023 	subu	a0,a1,t0
9d0032e8:	00083c02 	srl	a3,t0,0x10
9d0032ec:	310bffff 	andi	t3,t0,0xffff
9d0032f0:	24030001 	li	v1,1
9d0032f4:	00023402 	srl	a2,v0,0x10
9d0032f8:	0087001b 	divu	zero,a0,a3
9d0032fc:	00e001f4 	teq	a3,zero,0x7
9d003300:	00006810 	mfhi	t5
9d003304:	00006012 	mflo	t4
9d003308:	00004812 	mflo	t1
9d00330c:	718b5002 	mul	t2,t4,t3
9d003310:	000d6c00 	sll	t5,t5,0x10
9d003314:	01a63025 	or	a2,t5,a2
9d003318:	00ca682b 	sltu	t5,a2,t2
9d00331c:	0087001b 	divu	zero,a0,a3
9d003320:	00e001f4 	teq	a3,zero,0x7
9d003324:	11a00009 	beqz	t5,9d00334c <__udivdi3+0x1c0>
9d003328:	00ca2823 	subu	a1,a2,t2
9d00332c:	00c83021 	addu	a2,a2,t0
9d003330:	00c8202b 	sltu	a0,a2,t0
9d003334:	14800004 	bnez	a0,9d003348 <__udivdi3+0x1bc>
9d003338:	2589ffff 	addiu	t1,t4,-1
9d00333c:	00ca202b 	sltu	a0,a2,t2
9d003340:	548000a6 	bnezl	a0,9d0035dc <__udivdi3+0x450>
9d003344:	2589fffe 	addiu	t1,t4,-2
9d003348:	00ca2823 	subu	a1,a2,t2
9d00334c:	3042ffff 	andi	v0,v0,0xffff
9d003350:	00a7001b 	divu	zero,a1,a3
9d003354:	00e001f4 	teq	a3,zero,0x7
9d003358:	00005010 	mfhi	t2
9d00335c:	00003012 	mflo	a2
9d003360:	00002012 	mflo	a0
9d003364:	70cb5802 	mul	t3,a2,t3
9d003368:	000a5400 	sll	t2,t2,0x10
9d00336c:	01421025 	or	v0,t2,v0
9d003370:	004b502b 	sltu	t2,v0,t3
9d003374:	00a7001b 	divu	zero,a1,a3
9d003378:	00e001f4 	teq	a3,zero,0x7
9d00337c:	51400009 	beqzl	t2,9d0033a4 <__udivdi3+0x218>
9d003380:	00091400 	sll	v0,t1,0x10
9d003384:	00481021 	addu	v0,v0,t0
9d003388:	0048402b 	sltu	t0,v0,t0
9d00338c:	15000004 	bnez	t0,9d0033a0 <__udivdi3+0x214>
9d003390:	24c4ffff 	addiu	a0,a2,-1
9d003394:	004b582b 	sltu	t3,v0,t3
9d003398:	24c6fffe 	addiu	a2,a2,-2
9d00339c:	00cb200b 	movn	a0,a2,t3
9d0033a0:	00091400 	sll	v0,t1,0x10
9d0033a4:	03e00008 	jr	ra
9d0033a8:	00821025 	or	v0,a0,v0
9d0033ac:	00001821 	move	v1,zero
9d0033b0:	03e00008 	jr	ra
9d0033b4:	00001021 	move	v0,zero
9d0033b8:	00481023 	subu	v0,v0,t0
9d0033bc:	01073804 	sllv	a3,a3,t0
9d0033c0:	00461806 	srlv	v1,a2,v0
9d0033c4:	00673825 	or	a3,v1,a3
9d0033c8:	00455006 	srlv	t2,a1,v0
9d0033cc:	00071c02 	srl	v1,a3,0x10
9d0033d0:	0143001b 	divu	zero,t2,v1
9d0033d4:	006001f4 	teq	v1,zero,0x7
9d0033d8:	00004810 	mfhi	t1
9d0033dc:	00006812 	mflo	t5
9d0033e0:	30ebffff 	andi	t3,a3,0xffff
9d0033e4:	01052804 	sllv	a1,a1,t0
9d0033e8:	00441006 	srlv	v0,a0,v0
9d0033ec:	00452825 	or	a1,v0,a1
9d0033f0:	00057402 	srl	t6,a1,0x10
9d0033f4:	00001012 	mflo	v0
9d0033f8:	71ab6002 	mul	t4,t5,t3
9d0033fc:	00094c00 	sll	t1,t1,0x10
9d003400:	012e4825 	or	t1,t1,t6
9d003404:	012c702b 	sltu	t6,t1,t4
9d003408:	0143001b 	divu	zero,t2,v1
9d00340c:	006001f4 	teq	v1,zero,0x7
9d003410:	11c0000a 	beqz	t6,9d00343c <__udivdi3+0x2b0>
9d003414:	01063004 	sllv	a2,a2,t0
9d003418:	01274821 	addu	t1,t1,a3
9d00341c:	0127502b 	sltu	t2,t1,a3
9d003420:	15400006 	bnez	t2,9d00343c <__udivdi3+0x2b0>
9d003424:	25a2ffff 	addiu	v0,t5,-1
9d003428:	012c502b 	sltu	t2,t1,t4
9d00342c:	51400004 	beqzl	t2,9d003440 <__udivdi3+0x2b4>
9d003430:	012c4823 	subu	t1,t1,t4
9d003434:	25a2fffe 	addiu	v0,t5,-2
9d003438:	01274821 	addu	t1,t1,a3
9d00343c:	012c4823 	subu	t1,t1,t4
9d003440:	30a5ffff 	andi	a1,a1,0xffff
9d003444:	0123001b 	divu	zero,t1,v1
9d003448:	006001f4 	teq	v1,zero,0x7
9d00344c:	00006810 	mfhi	t5
9d003450:	00006012 	mflo	t4
9d003454:	00005012 	mflo	t2
9d003458:	718b5802 	mul	t3,t4,t3
9d00345c:	000d6c00 	sll	t5,t5,0x10
9d003460:	01a52825 	or	a1,t5,a1
9d003464:	00ab682b 	sltu	t5,a1,t3
9d003468:	0123001b 	divu	zero,t1,v1
9d00346c:	006001f4 	teq	v1,zero,0x7
9d003470:	51a0000b 	beqzl	t5,9d0034a0 <__udivdi3+0x314>
9d003474:	00021400 	sll	v0,v0,0x10
9d003478:	00a72821 	addu	a1,a1,a3
9d00347c:	00a7182b 	sltu	v1,a1,a3
9d003480:	14600006 	bnez	v1,9d00349c <__udivdi3+0x310>
9d003484:	258affff 	addiu	t2,t4,-1
9d003488:	00ab182b 	sltu	v1,a1,t3
9d00348c:	50600004 	beqzl	v1,9d0034a0 <__udivdi3+0x314>
9d003490:	00021400 	sll	v0,v0,0x10
9d003494:	258afffe 	addiu	t2,t4,-2
9d003498:	00a72821 	addu	a1,a1,a3
9d00349c:	00021400 	sll	v0,v0,0x10
9d0034a0:	01421025 	or	v0,t2,v0
9d0034a4:	00ab2823 	subu	a1,a1,t3
9d0034a8:	00460019 	multu	v0,a2
9d0034ac:	00003810 	mfhi	a3
9d0034b0:	00a7182b 	sltu	v1,a1,a3
9d0034b4:	14600044 	bnez	v1,9d0035c8 <__udivdi3+0x43c>
9d0034b8:	00003012 	mflo	a2
9d0034bc:	10a7003f 	beq	a1,a3,9d0035bc <__udivdi3+0x430>
9d0034c0:	01042004 	sllv	a0,a0,t0
9d0034c4:	03e00008 	jr	ra
9d0034c8:	00001821 	move	v1,zero
9d0034cc:	24020020 	li	v0,32
9d0034d0:	00431023 	subu	v0,v0,v1
9d0034d4:	00454806 	srlv	t1,a1,v0
9d0034d8:	00083c02 	srl	a3,t0,0x10
9d0034dc:	0127001b 	divu	zero,t1,a3
9d0034e0:	00e001f4 	teq	a3,zero,0x7
9d0034e4:	00003010 	mfhi	a2
9d0034e8:	00006012 	mflo	t4
9d0034ec:	310bffff 	andi	t3,t0,0xffff
9d0034f0:	00652804 	sllv	a1,a1,v1
9d0034f4:	00441006 	srlv	v0,a0,v0
9d0034f8:	00452825 	or	a1,v0,a1
9d0034fc:	00056c02 	srl	t5,a1,0x10
9d003500:	00641004 	sllv	v0,a0,v1
9d003504:	00001812 	mflo	v1
9d003508:	718b5002 	mul	t2,t4,t3
9d00350c:	00063400 	sll	a2,a2,0x10
9d003510:	01a63025 	or	a2,t5,a2
9d003514:	00ca202b 	sltu	a0,a2,t2
9d003518:	0127001b 	divu	zero,t1,a3
9d00351c:	00e001f4 	teq	a3,zero,0x7
9d003520:	5080000b 	beqzl	a0,9d003550 <__udivdi3+0x3c4>
9d003524:	00ca3023 	subu	a2,a2,t2
9d003528:	00c83021 	addu	a2,a2,t0
9d00352c:	00c8202b 	sltu	a0,a2,t0
9d003530:	14800006 	bnez	a0,9d00354c <__udivdi3+0x3c0>
9d003534:	2583ffff 	addiu	v1,t4,-1
9d003538:	00ca202b 	sltu	a0,a2,t2
9d00353c:	50800004 	beqzl	a0,9d003550 <__udivdi3+0x3c4>
9d003540:	00ca3023 	subu	a2,a2,t2
9d003544:	2583fffe 	addiu	v1,t4,-2
9d003548:	00c83021 	addu	a2,a2,t0
9d00354c:	00ca3023 	subu	a2,a2,t2
9d003550:	30acffff 	andi	t4,a1,0xffff
9d003554:	00c7001b 	divu	zero,a2,a3
9d003558:	00e001f4 	teq	a3,zero,0x7
9d00355c:	00002010 	mfhi	a0
9d003560:	00005012 	mflo	t2
9d003564:	00004812 	mflo	t1
9d003568:	714b2802 	mul	a1,t2,t3
9d00356c:	00042400 	sll	a0,a0,0x10
9d003570:	008c2025 	or	a0,a0,t4
9d003574:	0085602b 	sltu	t4,a0,a1
9d003578:	00c7001b 	divu	zero,a2,a3
9d00357c:	00e001f4 	teq	a3,zero,0x7
9d003580:	5180000b 	beqzl	t4,9d0035b0 <__udivdi3+0x424>
9d003584:	00031c00 	sll	v1,v1,0x10
9d003588:	00882021 	addu	a0,a0,t0
9d00358c:	0088302b 	sltu	a2,a0,t0
9d003590:	14c00006 	bnez	a2,9d0035ac <__udivdi3+0x420>
9d003594:	2549ffff 	addiu	t1,t2,-1
9d003598:	0085302b 	sltu	a2,a0,a1
9d00359c:	50c00004 	beqzl	a2,9d0035b0 <__udivdi3+0x424>
9d0035a0:	00031c00 	sll	v1,v1,0x10
9d0035a4:	2549fffe 	addiu	t1,t2,-2
9d0035a8:	00882021 	addu	a0,a0,t0
9d0035ac:	00031c00 	sll	v1,v1,0x10
9d0035b0:	00852023 	subu	a0,a0,a1
9d0035b4:	0b400cbd 	j	9d0032f4 <__udivdi3+0x168>
9d0035b8:	01231825 	or	v1,t1,v1
9d0035bc:	0086302b 	sltu	a2,a0,a2
9d0035c0:	10c0ffc0 	beqz	a2,9d0034c4 <__udivdi3+0x338>
9d0035c4:	00000000 	nop
9d0035c8:	0b400d31 	j	9d0034c4 <__udivdi3+0x338>
9d0035cc:	2442ffff 	addiu	v0,v0,-1
9d0035d0:	00001821 	move	v1,zero
9d0035d4:	03e00008 	jr	ra
9d0035d8:	24020001 	li	v0,1
9d0035dc:	0b400cd2 	j	9d003348 <__udivdi3+0x1bc>
9d0035e0:	00c83021 	addu	a2,a2,t0

9d0035e4 <NU32_Startup>:

// Perform startup routines:
//  Make NU32_LED1 and NU32_LED2 pins outputs (NU32_USER is by default an input)
//  Initialize the serial port - UART3 (no interrupt) 
//  Enable interrupts
void NU32_Startup() {
9d0035e4:	27bdfff8 	addiu	sp,sp,-8
9d0035e8:	afbf0004 	sw	ra,4(sp)
  // disable interrupts
  __builtin_disable_interrupts();
9d0035ec:	41626000 	di	v0
9d0035f0:	000000c0 	ehb
  // see Chapter 2 "CPU for Devices with M4K Core" of the PIC32 reference manual
  // most of the other bits have prescribed values
  // microchip does not provide a _CP0_SET_CONFIG macro, so we directly use
  // the compiler built-in command _mtc0
  // to disable cache, use 0xa4210582 
  __builtin_mtc0(_CP0_CONFIG, _CP0_CONFIG_SELECT, 0xa4210583); 
9d0035f4:	3c02a421 	lui	v0,0xa421
9d0035f8:	24420583 	addiu	v0,v0,1411
9d0035fc:	40828000 	mtc0	v0,c0_config
9d003600:	000000c0 	ehb
  
  // set the prefectch cache wait state to 2, as per the
  // electrical characteristics data sheet
  CHECONbits.PFMWS = 0x2;   
9d003604:	3c02bf88 	lui	v0,0xbf88
9d003608:	8c434000 	lw	v1,16384(v0)
9d00360c:	24050002 	li	a1,2
9d003610:	7ca31004 	ins	v1,a1,0x0,0x3
9d003614:	ac434000 	sw	v1,16384(v0)

  //enable prefetch for cacheable and noncacheable memory
  CHECONbits.PREFEN = 0x3; 
9d003618:	8c434000 	lw	v1,16384(v0)
9d00361c:	24040003 	li	a0,3
9d003620:	7c832904 	ins	v1,a0,0x4,0x2
9d003624:	ac434000 	sw	v1,16384(v0)

  // 0 data RAM access wait states
  BMXCONbits.BMXWSDRM = 0x0;
9d003628:	3c02bf88 	lui	v0,0xbf88
9d00362c:	8c432000 	lw	v1,8192(v0)
9d003630:	7c033184 	ins	v1,zero,0x6,0x1
9d003634:	ac432000 	sw	v1,8192(v0)
  
  // enable multi vector interrupts
  INTCONbits.MVEC = 0x1;
9d003638:	3c02bf88 	lui	v0,0xbf88
9d00363c:	8c461000 	lw	a2,4096(v0)
9d003640:	24030001 	li	v1,1
9d003644:	7c666304 	ins	a2,v1,0xc,0x1
9d003648:	ac461000 	sw	a2,4096(v0)

  // disable JTAG to get B10, B11, B12 and B13 back
  DDPCONbits.JTAGEN = 0;
9d00364c:	3c02bf81 	lui	v0,0xbf81
9d003650:	9046f200 	lbu	a2,-3584(v0)
9d003654:	7c0618c4 	ins	a2,zero,0x3,0x1
9d003658:	a046f200 	sb	a2,-3584(v0)

  TRISFCLR = 0x0003;  // Make F0 and F1 outputs (LED1 and LED2)
9d00365c:	3c02bf88 	lui	v0,0xbf88
9d003660:	ac446144 	sw	a0,24900(v0)
  NU32_LED1 = 1;      // LED1 is off
9d003664:	3c02bf88 	lui	v0,0xbf88
9d003668:	90446160 	lbu	a0,24928(v0)
9d00366c:	7c640004 	ins	a0,v1,0x0,0x1
9d003670:	a0446160 	sb	a0,24928(v0)
  NU32_LED2 = 0;      // LED2 is on
9d003674:	90446160 	lbu	a0,24928(v0)
9d003678:	7c040844 	ins	a0,zero,0x1,0x1
9d00367c:	a0446160 	sb	a0,24928(v0)

  // turn on UART3 without an interrupt
  U3MODEbits.BRGH = 0; // set baud to NU32_DESIRED_BAUD
9d003680:	3c02bf80 	lui	v0,0xbf80
9d003684:	94446400 	lhu	a0,25600(v0)
9d003688:	7c0418c4 	ins	a0,zero,0x3,0x1
9d00368c:	a4446400 	sh	a0,25600(v0)
  U3BRG = ((NU32_SYS_FREQ / NU32_DESIRED_BAUD) / 16) - 1;
9d003690:	24060014 	li	a2,20
9d003694:	3c04bf80 	lui	a0,0xbf80
9d003698:	ac866440 	sw	a2,25664(a0)

  // 8 bit, no parity bit, and 1 stop bit (8N1 setup)
  U3MODEbits.PDSEL = 0;
9d00369c:	94446400 	lhu	a0,25600(v0)
9d0036a0:	7c041044 	ins	a0,zero,0x1,0x2
9d0036a4:	a4446400 	sh	a0,25600(v0)
  U3MODEbits.STSEL = 0;
9d0036a8:	94446400 	lhu	a0,25600(v0)
9d0036ac:	7c040004 	ins	a0,zero,0x0,0x1
9d0036b0:	a4446400 	sh	a0,25600(v0)

  // configure TX & RX pins as output & input pins
  U3STAbits.UTXEN = 1;
9d0036b4:	3c04bf80 	lui	a0,0xbf80
9d0036b8:	8c866410 	lw	a2,25616(a0)
9d0036bc:	7c665284 	ins	a2,v1,0xa,0x1
9d0036c0:	ac866410 	sw	a2,25616(a0)
  U3STAbits.URXEN = 1;
9d0036c4:	8c866410 	lw	a2,25616(a0)
9d0036c8:	7c666304 	ins	a2,v1,0xc,0x1
9d0036cc:	ac866410 	sw	a2,25616(a0)
  // configure hardware flow control using RTS and CTS
  U3MODEbits.UEN = 2;
9d0036d0:	94446400 	lhu	a0,25600(v0)
9d0036d4:	7ca44a04 	ins	a0,a1,0x8,0x2
9d0036d8:	a4446400 	sh	a0,25600(v0)

  // enable the uart
  U3MODEbits.ON = 1;
9d0036dc:	94446400 	lhu	a0,25600(v0)
9d0036e0:	7c647bc4 	ins	a0,v1,0xf,0x1
9d0036e4:	a4446400 	sh	a0,25600(v0)

  __builtin_enable_interrupts();
9d0036e8:	41626020 	ei	v0
}
9d0036ec:	8fbf0004 	lw	ra,4(sp)
9d0036f0:	03e00008 	jr	ra
9d0036f4:	27bd0008 	addiu	sp,sp,8

9d0036f8 <NU32_ReadUART3>:
// Read from UART3
// block other functions until you get a '\r' or '\n'
// send the pointer to your char array and the number of elements in the array
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
9d0036f8:	00003021 	move	a2,zero
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d0036fc:	3c03bf80 	lui	v1,0xbf80
      data = U3RXREG;      // read the data
9d003700:	3c08bf80 	lui	t0,0xbf80
      if ((data == '\n') || (data == '\r')) {
9d003704:	2407000a 	li	a3,10
9d003708:	0b400dd2 	j	9d003748 <NU32_ReadUART3+0x50>
9d00370c:	2409000d 	li	t1,13
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d003710:	8c626410 	lw	v0,25616(v1)
9d003714:	30420001 	andi	v0,v0,0x1
9d003718:	1040fffd 	beqz	v0,9d003710 <NU32_ReadUART3+0x18>
9d00371c:	00000000 	nop
      data = U3RXREG;      // read the data
9d003720:	8d026430 	lw	v0,25648(t0)
9d003724:	7c021420 	seb	v0,v0
      if ((data == '\n') || (data == '\r')) {
9d003728:	5047000e 	beql	v0,a3,9d003764 <NU32_ReadUART3+0x6c>
9d00372c:	00862021 	addu	a0,a0,a2
9d003730:	1049000b 	beq	v0,t1,9d003760 <NU32_ReadUART3+0x68>
9d003734:	00865021 	addu	t2,a0,a2
        complete = 1;
      } else {
        message[num_bytes] = data;
9d003738:	a1420000 	sb	v0,0(t2)
        ++num_bytes;
9d00373c:	24c60001 	addiu	a2,a2,1
        // roll over if the array is too small
        if (num_bytes >= maxLength) {
9d003740:	00c5102a 	slt	v0,a2,a1
          num_bytes = 0;
9d003744:	0002300a 	movz	a2,zero,v0
void NU32_ReadUART3(char * message, int maxLength) {
  char data = 0;
  int complete = 0, num_bytes = 0;
  // loop until you get a '\r' or '\n'
  while (!complete) {
    if (U3STAbits.URXDA) { // if data is available
9d003748:	8c626410 	lw	v0,25616(v1)
9d00374c:	30420001 	andi	v0,v0,0x1
9d003750:	1040ffef 	beqz	v0,9d003710 <NU32_ReadUART3+0x18>
9d003754:	00000000 	nop
9d003758:	0b400dc8 	j	9d003720 <NU32_ReadUART3+0x28>
9d00375c:	00000000 	nop
        }
      }
    }
  }
  // end the string
  message[num_bytes] = '\0';
9d003760:	00862021 	addu	a0,a0,a2
9d003764:	03e00008 	jr	ra
9d003768:	a0800000 	sb	zero,0(a0)

9d00376c <NU32_WriteUART3>:
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d00376c:	80850000 	lb	a1,0(a0)
9d003770:	10a0000b 	beqz	a1,9d0037a0 <NU32_WriteUART3+0x34>
9d003774:	3c03bf80 	lui	v1,0xbf80
    while (U3STAbits.UTXBF) {
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d003778:	3c06bf80 	lui	a2,0xbf80
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
    while (U3STAbits.UTXBF) {
9d00377c:	8c626410 	lw	v0,25616(v1)
9d003780:	30420200 	andi	v0,v0,0x200
9d003784:	1440fffd 	bnez	v0,9d00377c <NU32_WriteUART3+0x10>
9d003788:	00000000 	nop
      ; // wait until tx buffer isn't full
    }
    U3TXREG = *string;
9d00378c:	acc56420 	sw	a1,25632(a2)
    ++string;
9d003790:	24840001 	addiu	a0,a0,1
  message[num_bytes] = '\0';
}

// Write a character array using UART3
void NU32_WriteUART3(const char * string) {
  while (*string != '\0') {
9d003794:	80850000 	lb	a1,0(a0)
9d003798:	14a0fff8 	bnez	a1,9d00377c <NU32_WriteUART3+0x10>
9d00379c:	00000000 	nop
9d0037a0:	03e00008 	jr	ra
9d0037a4:	00000000 	nop

Disassembly of section .text.fputc:

9d0037a8 <fputc>:
9d0037a8:	27bdffe0 	addiu	sp,sp,-32
9d0037ac:	afbf001c 	sw	ra,28(sp)
9d0037b0:	afb10018 	sw	s1,24(sp)
9d0037b4:	afb00014 	sw	s0,20(sp)
9d0037b8:	94a2000c 	lhu	v0,12(a1)
9d0037bc:	30430002 	andi	v1,v0,0x2
9d0037c0:	10600048 	beqz	v1,9d0038e4 <fputc+0x13c>
9d0037c4:	00a08021 	move	s0,a1
9d0037c8:	30430200 	andi	v1,v0,0x200
9d0037cc:	1060001c 	beqz	v1,9d003840 <fputc+0x98>
9d0037d0:	8ca30004 	lw	v1,4(a1)
9d0037d4:	34450200 	ori	a1,v0,0x200
9d0037d8:	a605000c 	sh	a1,12(s0)
9d0037dc:	1060001c 	beqz	v1,9d003850 <fputc+0xa8>
9d0037e0:	309100ff 	andi	s1,a0,0xff
9d0037e4:	2404000a 	li	a0,10
9d0037e8:	1224001f 	beq	s1,a0,9d003868 <fputc+0xc0>
9d0037ec:	30420080 	andi	v0,v0,0x80
9d0037f0:	8e020010 	lw	v0,16(s0)
9d0037f4:	10620036 	beq	v1,v0,9d0038d0 <fputc+0x128>
9d0037f8:	24630001 	addiu	v1,v1,1
9d0037fc:	8e020000 	lw	v0,0(s0)
9d003800:	24440001 	addiu	a0,v0,1
9d003804:	ae040000 	sw	a0,0(s0)
9d003808:	ae030004 	sw	v1,4(s0)
9d00380c:	a0510000 	sb	s1,0(v0)
9d003810:	24030001 	li	v1,1
9d003814:	3c02a000 	lui	v0,0xa000
9d003818:	a04300a8 	sb	v1,168(v0)
9d00381c:	2402000a 	li	v0,10
9d003820:	52220018 	beql	s1,v0,9d003884 <fputc+0xdc>
9d003824:	9603000c 	lhu	v1,12(s0)
9d003828:	02201021 	move	v0,s1
9d00382c:	8fbf001c 	lw	ra,28(sp)
9d003830:	8fb10018 	lw	s1,24(sp)
9d003834:	8fb00014 	lw	s0,20(sp)
9d003838:	03e00008 	jr	ra
9d00383c:	27bd0020 	addiu	sp,sp,32
9d003840:	14600028 	bnez	v1,9d0038e4 <fputc+0x13c>
9d003844:	34450200 	ori	a1,v0,0x200
9d003848:	a605000c 	sh	a1,12(s0)
9d00384c:	309100ff 	andi	s1,a0,0xff
9d003850:	8e040008 	lw	a0,8(s0)
9d003854:	ae040000 	sw	a0,0(s0)
9d003858:	2404000a 	li	a0,10
9d00385c:	5624ffe5 	bnel	s1,a0,9d0037f4 <fputc+0x4c>
9d003860:	8e020010 	lw	v0,16(s0)
9d003864:	30420080 	andi	v0,v0,0x80
9d003868:	5440ffe2 	bnezl	v0,9d0037f4 <fputc+0x4c>
9d00386c:	8e020010 	lw	v0,16(s0)
9d003870:	2404000d 	li	a0,13
9d003874:	0f400dea 	jal	9d0037a8 <fputc>
9d003878:	02002821 	move	a1,s0
9d00387c:	0b400dfc 	j	9d0037f0 <fputc+0x48>
9d003880:	8e030004 	lw	v1,4(s0)
9d003884:	30630100 	andi	v1,v1,0x100
9d003888:	1060ffe8 	beqz	v1,9d00382c <fputc+0x84>
9d00388c:	2402000a 	li	v0,10
9d003890:	9604000e 	lhu	a0,14(s0)
9d003894:	8e050008 	lw	a1,8(s0)
9d003898:	0f400fc5 	jal	9d003f14 <.LFE2>
9d00389c:	8e060004 	lw	a2,4(s0)
9d0038a0:	8e030004 	lw	v1,4(s0)
9d0038a4:	50430006 	beql	v0,v1,9d0038c0 <fputc+0x118>
9d0038a8:	8e030008 	lw	v1,8(s0)
9d0038ac:	9602000c 	lhu	v0,12(s0)
9d0038b0:	2411ffff 	li	s1,-1
9d0038b4:	34420030 	ori	v0,v0,0x30
9d0038b8:	a602000c 	sh	v0,12(s0)
9d0038bc:	8e030008 	lw	v1,8(s0)
9d0038c0:	ae000004 	sw	zero,4(s0)
9d0038c4:	02201021 	move	v0,s1
9d0038c8:	0b400e0b 	j	9d00382c <fputc+0x84>
9d0038cc:	ae030000 	sw	v1,0(s0)
9d0038d0:	7c112420 	seb	a0,s1
9d0038d4:	0f400e3b 	jal	9d0038ec <.LFE0>
9d0038d8:	02002821 	move	a1,s0
9d0038dc:	0b400e0c 	j	9d003830 <fputc+0x88>
9d0038e0:	8fbf001c 	lw	ra,28(sp)
9d0038e4:	0b400e0b 	j	9d00382c <fputc+0x84>
9d0038e8:	2402ffff 	li	v0,-1

Disassembly of section .text._flsbuf:

9d0038ec <_flsbuf>:
9d0038ec:	27bdffe8 	addiu	sp,sp,-24
9d0038f0:	afbf0014 	sw	ra,20(sp)
9d0038f4:	afb00010 	sw	s0,16(sp)
9d0038f8:	00a08021 	move	s0,a1
9d0038fc:	94a2000c 	lhu	v0,12(a1)
9d003900:	30430040 	andi	v1,v0,0x40
9d003904:	1460001c 	bnez	v1,9d003978 <_flsbuf+0x8c>
9d003908:	a3a40018 	sb	a0,24(sp)
9d00390c:	30430002 	andi	v1,v0,0x2
9d003910:	5060003d 	beqzl	v1,9d003a08 <_flsbuf+0x11c>
9d003914:	34420030 	ori	v0,v0,0x30
9d003918:	8ca30010 	lw	v1,16(a1)
9d00391c:	5060001b 	beqzl	v1,9d00398c <_flsbuf+0xa0>
9d003920:	94a4000e 	lhu	a0,14(a1)
9d003924:	8ca50008 	lw	a1,8(a1)
9d003928:	50a0002d 	beqzl	a1,9d0039e0 <_flsbuf+0xf4>
9d00392c:	3c05a000 	lui	a1,0xa000
9d003930:	8e060004 	lw	a2,4(s0)
9d003934:	0f400fc5 	jal	9d003f14 <.LFE2>
9d003938:	9604000e 	lhu	a0,14(s0)
9d00393c:	8e020008 	lw	v0,8(s0)
9d003940:	83a30018 	lb	v1,24(sp)
9d003944:	24440001 	addiu	a0,v0,1
9d003948:	2405ffff 	li	a1,-1
9d00394c:	ae050004 	sw	a1,4(s0)
9d003950:	ae040000 	sw	a0,0(s0)
9d003954:	a0430000 	sb	v1,0(v0)
9d003958:	83a20018 	lb	v0,24(sp)
9d00395c:	2403000a 	li	v1,10
9d003960:	50430013 	beql	v0,v1,9d0039b0 <_flsbuf+0xc4>
9d003964:	9603000c 	lhu	v1,12(s0)
9d003968:	8fbf0014 	lw	ra,20(sp)
9d00396c:	8fb00010 	lw	s0,16(sp)
9d003970:	03e00008 	jr	ra
9d003974:	27bd0018 	addiu	sp,sp,24
9d003978:	7c041420 	seb	v0,a0
9d00397c:	8fbf0014 	lw	ra,20(sp)
9d003980:	8fb00010 	lw	s0,16(sp)
9d003984:	03e00008 	jr	ra
9d003988:	27bd0018 	addiu	sp,sp,24
9d00398c:	27a50018 	addiu	a1,sp,24
9d003990:	0f400fc5 	jal	9d003f14 <.LFE2>
9d003994:	24060001 	li	a2,1
9d003998:	ae000004 	sw	zero,4(s0)
9d00399c:	83a20018 	lb	v0,24(sp)
9d0039a0:	8fbf0014 	lw	ra,20(sp)
9d0039a4:	8fb00010 	lw	s0,16(sp)
9d0039a8:	03e00008 	jr	ra
9d0039ac:	27bd0018 	addiu	sp,sp,24
9d0039b0:	30630100 	andi	v1,v1,0x100
9d0039b4:	1060ffed 	beqz	v1,9d00396c <_flsbuf+0x80>
9d0039b8:	8fbf0014 	lw	ra,20(sp)
9d0039bc:	9604000e 	lhu	a0,14(s0)
9d0039c0:	8e050008 	lw	a1,8(s0)
9d0039c4:	0f400fc5 	jal	9d003f14 <.LFE2>
9d0039c8:	8e060004 	lw	a2,4(s0)
9d0039cc:	8e030008 	lw	v1,8(s0)
9d0039d0:	83a20018 	lb	v0,24(sp)
9d0039d4:	ae000004 	sw	zero,4(s0)
9d0039d8:	0b400e5a 	j	9d003968 <_flsbuf+0x7c>
9d0039dc:	ae030000 	sw	v1,0(s0)
9d0039e0:	24a500cc 	addiu	a1,a1,204
9d0039e4:	24030020 	li	v1,32
9d0039e8:	34420008 	ori	v0,v0,0x8
9d0039ec:	ae050008 	sw	a1,8(s0)
9d0039f0:	ae050000 	sw	a1,0(s0)
9d0039f4:	ae030010 	sw	v1,16(s0)
9d0039f8:	ae030004 	sw	v1,4(s0)
9d0039fc:	a602000c 	sh	v0,12(s0)
9d003a00:	0b400e4d 	j	9d003934 <_flsbuf+0x48>
9d003a04:	24060020 	li	a2,32
9d003a08:	a4a2000c 	sh	v0,12(a1)
9d003a0c:	aca00004 	sw	zero,4(a1)
9d003a10:	0b400e5a 	j	9d003968 <_flsbuf+0x7c>
9d003a14:	2402ffff 	li	v0,-1

Disassembly of section .rodata:

9d003a18 <_ctype>:
9d003a18:	20202000 20202020 28282020 20282828     .         ((((( 
9d003a28:	20202020 20202020 20202020 20202020                     
9d003a38:	10108020 10101010 10101010 10101010      ...............
9d003a48:	04040410 04040404 10040404 10101010     ................
9d003a58:	41411010 41414141 01010101 01010101     ..AAAAAA........
9d003a68:	01010101 01010101 01010101 10101010     ................
9d003a78:	42421010 42424242 02020202 02020202     ..BBBBBB........
9d003a88:	02020202 02020202 02020202 10101010     ................
9d003a98:	00000020 00000000 00000000 00000000      ...............
	...

Disassembly of section .text.general_exception:

9d003b1c <_general_exception_context>:
9d003b1c:	27bdffa8 	addiu	sp,sp,-88
9d003b20:	afa10004 	sw	at,4(sp)
9d003b24:	afa20008 	sw	v0,8(sp)
9d003b28:	afa3000c 	sw	v1,12(sp)
9d003b2c:	afa40010 	sw	a0,16(sp)
9d003b30:	afa50014 	sw	a1,20(sp)
9d003b34:	afa60018 	sw	a2,24(sp)
9d003b38:	afa7001c 	sw	a3,28(sp)
9d003b3c:	afa80020 	sw	t0,32(sp)
9d003b40:	afa90024 	sw	t1,36(sp)
9d003b44:	afaa0028 	sw	t2,40(sp)
9d003b48:	afab002c 	sw	t3,44(sp)
9d003b4c:	afac0030 	sw	t4,48(sp)
9d003b50:	afad0034 	sw	t5,52(sp)
9d003b54:	afae0038 	sw	t6,56(sp)
9d003b58:	afaf003c 	sw	t7,60(sp)
9d003b5c:	afb80040 	sw	t8,64(sp)
9d003b60:	afb90044 	sw	t9,68(sp)
9d003b64:	afbf0048 	sw	ra,72(sp)
9d003b68:	00004012 	mflo	t0
9d003b6c:	afa8004c 	sw	t0,76(sp)
9d003b70:	00004010 	mfhi	t0
9d003b74:	afa80050 	sw	t0,80(sp)
9d003b78:	3c1a9d00 	lui	k0,0x9d00
9d003b7c:	275a40b4 	addiu	k0,k0,16564
9d003b80:	00000000 	nop
9d003b84:	40046800 	mfc0	a0,c0_cause
9d003b88:	40056000 	mfc0	a1,c0_status
9d003b8c:	0340f809 	jalr	k0
9d003b90:	00000000 	nop
9d003b94:	8fa80050 	lw	t0,80(sp)
9d003b98:	01000011 	mthi	t0
9d003b9c:	8fa8004c 	lw	t0,76(sp)
9d003ba0:	01000013 	mtlo	t0
9d003ba4:	8fa10004 	lw	at,4(sp)
9d003ba8:	8fa20008 	lw	v0,8(sp)
9d003bac:	8fa3000c 	lw	v1,12(sp)
9d003bb0:	8fa40010 	lw	a0,16(sp)
9d003bb4:	8fa50014 	lw	a1,20(sp)
9d003bb8:	8fa60018 	lw	a2,24(sp)
9d003bbc:	8fa7001c 	lw	a3,28(sp)
9d003bc0:	8fa80020 	lw	t0,32(sp)
9d003bc4:	8fa90024 	lw	t1,36(sp)
9d003bc8:	8faa0028 	lw	t2,40(sp)
9d003bcc:	8fab002c 	lw	t3,44(sp)
9d003bd0:	8fac0030 	lw	t4,48(sp)
9d003bd4:	8fad0034 	lw	t5,52(sp)
9d003bd8:	8fae0038 	lw	t6,56(sp)
9d003bdc:	8faf003c 	lw	t7,60(sp)
9d003be0:	8fb80040 	lw	t8,64(sp)
9d003be4:	8fb90044 	lw	t9,68(sp)
9d003be8:	8fbf0048 	lw	ra,72(sp)
9d003bec:	27bd0058 	addiu	sp,sp,88
9d003bf0:	000000c0 	ehb
9d003bf4:	42000018 	eret

Disassembly of section .text._mon_putc:

9d003bf8 <_mon_putc>:
9d003bf8:	27bdffe8 	addiu	sp,sp,-24
9d003bfc:	afbf0014 	sw	ra,20(sp)
9d003c00:	3c02a000 	lui	v0,0xa000
9d003c04:	8c420000 	lw	v0,0(v0)
9d003c08:	1440000a 	bnez	v0,9d003c34 <_mon_putc+0x3c>
9d003c0c:	7c042420 	seb	a0,a0
9d003c10:	3c020000 	lui	v0,0x0
9d003c14:	24420000 	addiu	v0,v0,0
9d003c18:	10400025 	beqz	v0,9d003cb0 <_mon_putc+0xb8>
9d003c1c:	3c020000 	lui	v0,0x0
9d003c20:	0c000000 	jal	90000000 <_bmxdkpba_address+0x8ffe0000>
9d003c24:	00000000 	nop
9d003c28:	8fbf0014 	lw	ra,20(sp)
9d003c2c:	03e00008 	jr	ra
9d003c30:	27bd0018 	addiu	sp,sp,24
9d003c34:	24030001 	li	v1,1
9d003c38:	10430015 	beq	v0,v1,9d003c90 <_mon_putc+0x98>
9d003c3c:	3c05bf80 	lui	a1,0xbf80
9d003c40:	3c05bf80 	lui	a1,0xbf80
9d003c44:	24a56820 	addiu	a1,a1,26656
9d003c48:	3c02bf80 	lui	v0,0xbf80
9d003c4c:	24426818 	addiu	v0,v0,26648
9d003c50:	3c06bf80 	lui	a2,0xbf80
9d003c54:	24c66808 	addiu	a2,a2,26632
9d003c58:	3c03bf80 	lui	v1,0xbf80
9d003c5c:	24636810 	addiu	v1,v1,26640
9d003c60:	34078000 	li	a3,0x8000
9d003c64:	acc70000 	sw	a3,0(a2)
9d003c68:	24060400 	li	a2,1024
9d003c6c:	ac460000 	sw	a2,0(v0)
9d003c70:	8c620000 	lw	v0,0(v1)
9d003c74:	30420100 	andi	v0,v0,0x100
9d003c78:	1040fffd 	beqz	v0,9d003c70 <_mon_putc+0x78>
9d003c7c:	00000000 	nop
9d003c80:	aca40000 	sw	a0,0(a1)
9d003c84:	8fbf0014 	lw	ra,20(sp)
9d003c88:	03e00008 	jr	ra
9d003c8c:	27bd0018 	addiu	sp,sp,24
9d003c90:	24a56020 	addiu	a1,a1,24608
9d003c94:	3c02bf80 	lui	v0,0xbf80
9d003c98:	24426018 	addiu	v0,v0,24600
9d003c9c:	3c06bf80 	lui	a2,0xbf80
9d003ca0:	24c66008 	addiu	a2,a2,24584
9d003ca4:	3c03bf80 	lui	v1,0xbf80
9d003ca8:	0b400f18 	j	9d003c60 <_mon_putc+0x68>
9d003cac:	24636010 	addiu	v1,v1,24592
9d003cb0:	24420000 	addiu	v0,v0,0
9d003cb4:	1040ffe3 	beqz	v0,9d003c44 <_mon_putc+0x4c>
9d003cb8:	3c05bf80 	lui	a1,0xbf80
9d003cbc:	0c000000 	jal	90000000 <_bmxdkpba_address+0x8ffe0000>
9d003cc0:	00000000 	nop
9d003cc4:	0b400f0b 	j	9d003c2c <_mon_putc+0x34>
9d003cc8:	8fbf0014 	lw	ra,20(sp)

Disassembly of section .rodata:

9d003cd0 <dpowers>:
9d003cd0:	00000001 00000000 0000000a 00000000     ................
9d003ce0:	00000064 00000000 000003e8 00000000     d...............
9d003cf0:	00002710 00000000 000186a0 00000000     .'..............
9d003d00:	000f4240 00000000 00989680 00000000     @B..............
9d003d10:	05f5e100 00000000 3b9aca00 00000000     ...........;....
9d003d20:	540be400 00000002 4876e800 00000017     ...T......vH....
9d003d30:	d4a51000 000000e8 4e72a000 00000918     ..........rN....
9d003d40:	107a4000 00005af3 a4c68000 00038d7e     .@z..Z......~...
9d003d50:	6fc10000 002386f2 5d8a0000 01634578     ...o..#....]xEc.
9d003d60:	a7640000 0de0b6b3 89e80000 8ac72304     ..d..........#..
9d003d70:	6c756e28 0000296c 33323130 37363534     (null)..01234567
9d003d80:	42413938 46454443 00000000 33323130     89ABCDEF....0123
9d003d90:	37363534 62613938 66656463 00000000     456789abcdef....

Disassembly of section .dinit:

9d003da0 <.dinit>:
9d003da0:	a0000004 	sb	zero,4(zero)
9d003da4:	000000a4 	0xa4
9d003da8:	00000001 	movf	zero,zero,$fcc0
9d003dac:	a00000ac 	sb	zero,172(zero)
9d003db0:	00000000 	nop
9d003db4:	a00000ac 	sb	zero,172(zero)
9d003db8:	00000009 	jalr	zero,zero
9d003dbc:	00000020 	add	zero,zero,zero
9d003dc0:	a00000cc 	sb	zero,204(zero)
9d003dc4:	00000000 	nop
9d003dc8:	a00000cc 	sb	zero,204(zero)
9d003dcc:	0001020e 	0x1020e
	...
9d003de0:	00020206 	0x20206
	...
9d003e4c:	a0000004 	sb	zero,4(zero)
9d003e50:	a00000a8 	sb	zero,168(zero)
9d003e54:	00000044 	0x44
9d003e58:	00000000 	nop
9d003e5c:	a0000000 	sb	zero,0(zero)
9d003e60:	00000004 	sllv	zero,zero,zero
9d003e64:	00000001 	movf	zero,zero,$fcc0
9d003e68:	00000002 	srl	zero,zero,0x0
9d003e6c:	00000000 	nop

Disassembly of section .text:

9d003e70 <main>:
#include "NU32.h"          // constants, funcs for startup and UART
#include "LCD.h"

#define MSG_LEN 20

int main() {
9d003e70:	27bdffc0 	addiu	sp,sp,-64
9d003e74:	afbf003c 	sw	ra,60(sp)
9d003e78:	afb30038 	sw	s3,56(sp)
9d003e7c:	afb20034 	sw	s2,52(sp)
9d003e80:	afb10030 	sw	s1,48(sp)
  char msg[MSG_LEN];
  int nreceived = 1;

  NU32_Startup();         // cache on, interrupts on, LED/button init, UART init
9d003e84:	0f400d79 	jal	9d0035e4 <NU32_Startup>
9d003e88:	afb0002c 	sw	s0,44(sp)

9d003e8c <.LVL1>:
  
  LCD_Setup();
9d003e8c:	0f400b54 	jal	9d002d50 <LCD_Setup>
9d003e90:	24100001 	li	s0,1

9d003e94 <.LVL2>:
  
  while (1) {
    NU32_WriteUART3("What do you want to write? ");
9d003e94:	3c139d00 	lui	s3,0x9d00
9d003e98:	26734188 	addiu	s3,s3,16776
    NU32_ReadUART3(msg, MSG_LEN);             // get the response
    LCD_Clear();                              // clear LCD screen
    LCD_Move(0,0);
    LCD_WriteString(msg);                     // write msg at row 0 col 0
    sprintf(msg, "Received %d", nreceived);   // display how many messages received
9d003e9c:	3c129d00 	lui	s2,0x9d00
9d003ea0:	265241a4 	addiu	s2,s2,16804
    ++nreceived;
    LCD_Move(1,3);
    LCD_WriteString(msg);                     // write new msg at row 1 col 3
    NU32_WriteUART3("\r\n");          
9d003ea4:	3c119d00 	lui	s1,0x9d00
9d003ea8:	263141b0 	addiu	s1,s1,16816
  NU32_Startup();         // cache on, interrupts on, LED/button init, UART init
  
  LCD_Setup();
  
  while (1) {
    NU32_WriteUART3("What do you want to write? ");
9d003eac:	0f400ddb 	jal	9d00376c <NU32_WriteUART3>
9d003eb0:	02602021 	move	a0,s3

9d003eb4 <.LVL4>:
    NU32_ReadUART3(msg, MSG_LEN);             // get the response
9d003eb4:	27a40010 	addiu	a0,sp,16
9d003eb8:	0f400dbe 	jal	9d0036f8 <NU32_ReadUART3>
9d003ebc:	24050014 	li	a1,20

9d003ec0 <.LVL5>:
    LCD_Clear();                              // clear LCD screen
9d003ec0:	0f400b97 	jal	9d002e5c <LCD_Clear>
9d003ec4:	00000000 	nop

9d003ec8 <.LVL6>:
    LCD_Move(0,0);
9d003ec8:	00002021 	move	a0,zero
9d003ecc:	0f400bd7 	jal	9d002f5c <LCD_Move>
9d003ed0:	00002821 	move	a1,zero

9d003ed4 <.LVL7>:
    LCD_WriteString(msg);                     // write msg at row 0 col 0
9d003ed4:	0f400bf4 	jal	9d002fd0 <LCD_WriteString>
9d003ed8:	27a40010 	addiu	a0,sp,16

9d003edc <.LVL8>:
    sprintf(msg, "Received %d", nreceived);   // display how many messages received
9d003edc:	27a40010 	addiu	a0,sp,16
9d003ee0:	02402821 	move	a1,s2
9d003ee4:	0f400fec 	jal	9d003fb0 <.LFE0>
9d003ee8:	02003021 	move	a2,s0

9d003eec <.LVL9>:
    ++nreceived;
9d003eec:	26100001 	addiu	s0,s0,1
    LCD_Move(1,3);
9d003ef0:	24040001 	li	a0,1
9d003ef4:	0f400bd7 	jal	9d002f5c <LCD_Move>
9d003ef8:	24050003 	li	a1,3

9d003efc <.LVL11>:
    LCD_WriteString(msg);                     // write new msg at row 1 col 3
9d003efc:	0f400bf4 	jal	9d002fd0 <LCD_WriteString>
9d003f00:	27a40010 	addiu	a0,sp,16

9d003f04 <.LVL12>:
    NU32_WriteUART3("\r\n");          
9d003f04:	0f400ddb 	jal	9d00376c <NU32_WriteUART3>
9d003f08:	02202021 	move	a0,s1

9d003f0c <.LVL13>:
9d003f0c:	0b400fab 	j	9d003eac <.LVL2+0x18>
9d003f10:	00000000 	nop

Disassembly of section .text.write:

9d003f14 <write>:
9d003f14:	10a00018 	beqz	a1,9d003f78 <write+0x64>
9d003f18:	00001021 	move	v0,zero
9d003f1c:	10c00012 	beqz	a2,9d003f68 <write+0x54>
9d003f20:	2c840003 	sltiu	a0,a0,3
9d003f24:	10800012 	beqz	a0,9d003f70 <write+0x5c>
9d003f28:	00000000 	nop
9d003f2c:	27bdffe0 	addiu	sp,sp,-32
9d003f30:	afbf001c 	sw	ra,28(sp)
9d003f34:	3c020000 	lui	v0,0x0
9d003f38:	24420000 	addiu	v0,v0,0
9d003f3c:	10400010 	beqz	v0,9d003f80 <write+0x6c>
9d003f40:	afb00018 	sw	s0,24(sp)
9d003f44:	00a02021 	move	a0,a1
9d003f48:	00c02821 	move	a1,a2
9d003f4c:	0c000000 	jal	90000000 <_bmxdkpba_address+0x8ffe0000>
9d003f50:	afa60014 	sw	a2,20(sp)
9d003f54:	8fa60014 	lw	a2,20(sp)
9d003f58:	00c01021 	move	v0,a2
9d003f5c:	8fbf001c 	lw	ra,28(sp)
9d003f60:	8fb00018 	lw	s0,24(sp)
9d003f64:	27bd0020 	addiu	sp,sp,32
9d003f68:	03e00008 	jr	ra
9d003f6c:	00000000 	nop
9d003f70:	03e00008 	jr	ra
9d003f74:	00c01021 	move	v0,a2
9d003f78:	03e00008 	jr	ra
9d003f7c:	00000000 	nop
9d003f80:	00c08021 	move	s0,a2
9d003f84:	80a40000 	lb	a0,0(a1)
9d003f88:	2610ffff 	addiu	s0,s0,-1
9d003f8c:	24a50001 	addiu	a1,a1,1
9d003f90:	afa50010 	sw	a1,16(sp)
9d003f94:	0f400efe 	jal	9d003bf8 <_mon_putc>
9d003f98:	afa60014 	sw	a2,20(sp)
9d003f9c:	8fa50010 	lw	a1,16(sp)
9d003fa0:	1600fff8 	bnez	s0,9d003f84 <write+0x70>
9d003fa4:	8fa60014 	lw	a2,20(sp)
9d003fa8:	0b400fd7 	j	9d003f5c <write+0x48>
9d003fac:	00c01021 	move	v0,a2

Disassembly of section .text._sprintf_cdnopuxX:

9d003fb0 <_sprintf_cdnopuxX>:
9d003fb0:	27bdffd0 	addiu	sp,sp,-48
9d003fb4:	afbf002c 	sw	ra,44(sp)
9d003fb8:	afb00028 	sw	s0,40(sp)
9d003fbc:	27a20038 	addiu	v0,sp,56
9d003fc0:	00808021 	move	s0,a0
9d003fc4:	afa60038 	sw	a2,56(sp)
9d003fc8:	27a40010 	addiu	a0,sp,16
9d003fcc:	00403021 	move	a2,v0
9d003fd0:	afa7003c 	sw	a3,60(sp)
9d003fd4:	afa20024 	sw	v0,36(sp)
9d003fd8:	24027fff 	li	v0,32767
9d003fdc:	afa20020 	sw	v0,32(sp)
9d003fe0:	afa00014 	sw	zero,20(sp)
9d003fe4:	afb00010 	sw	s0,16(sp)
9d003fe8:	afb00018 	sw	s0,24(sp)
9d003fec:	240200c2 	li	v0,194
9d003ff0:	0f400780 	jal	9d001e00 <_vfprintf_cdnopuxX>
9d003ff4:	a7a2001c 	sh	v0,28(sp)
9d003ff8:	8fa20010 	lw	v0,16(sp)
9d003ffc:	a0400000 	sb	zero,0(v0)
9d004000:	8fa20010 	lw	v0,16(sp)
9d004004:	00501023 	subu	v0,v0,s0
9d004008:	8fbf002c 	lw	ra,44(sp)
9d00400c:	8fb00028 	lw	s0,40(sp)
9d004010:	03e00008 	jr	ra
9d004014:	27bd0030 	addiu	sp,sp,48

Disassembly of section .text.main_entry:

9d004018 <_main_entry>:
9d004018:	3c040000 	lui	a0,0x0
9d00401c:	27bdffe8 	addiu	sp,sp,-24
9d004020:	24840000 	addiu	a0,a0,0
9d004024:	10800003 	beqz	a0,9d004034 <_main_entry+0x1c>
9d004028:	afbf0014 	sw	ra,20(sp)
9d00402c:	0080f809 	jalr	a0
9d004030:	00000000 	nop
9d004034:	30840000 	andi	a0,a0,0x0
9d004038:	30a50000 	andi	a1,a1,0x0
9d00403c:	3c089d00 	lui	t0,0x9d00
9d004040:	25083e70 	addiu	t0,t0,15984
9d004044:	0100f809 	jalr	t0
9d004048:	00000000 	nop

9d00404c <__crt0_exit>:
9d00404c:	3c020000 24420000 10400003 00000000     ...<..B$..@.....
9d00405c:	0040f809 00000000 1000fff9 00000000     ..@.............

Disassembly of section .text._bootstrap_exception_handler:

9d00406c <_bootstrap_exception_handler>:
9d00406c:	3c020000 	lui	v0,0x0
9d004070:	24420000 	addiu	v0,v0,0
9d004074:	10400005 	beqz	v0,9d00408c <_bootstrap_exception_handler+0x20>
9d004078:	3c020000 	lui	v0,0x0
9d00407c:	24420000 	addiu	v0,v0,0
9d004080:	10400003 	beqz	v0,9d004090 <_bootstrap_exception_handler+0x24>
9d004084:	3c029d00 	lui	v0,0x9d00
9d004088:	7000003f 	sdbbp
9d00408c:	3c029d00 	lui	v0,0x9d00
9d004090:	24424144 	addiu	v0,v0,16708
9d004094:	10400005 	beqz	v0,9d0040ac <_bootstrap_exception_handler+0x40>
9d004098:	00000000 	nop
9d00409c:	27bdffe8 	addiu	sp,sp,-24
9d0040a0:	afbf0014 	sw	ra,20(sp)
9d0040a4:	0040f809 	jalr	v0
9d0040a8:	00000000 	nop
9d0040ac:	0b40102b 	j	9d0040ac <_bootstrap_exception_handler+0x40>
9d0040b0:	00000000 	nop

Disassembly of section .text._general_exception_handler:

9d0040b4 <_general_exception_handler>:
9d0040b4:	3c020000 	lui	v0,0x0
9d0040b8:	24420000 	addiu	v0,v0,0
9d0040bc:	10400005 	beqz	v0,9d0040d4 <_general_exception_handler+0x20>
9d0040c0:	3c020000 	lui	v0,0x0
9d0040c4:	24420000 	addiu	v0,v0,0
9d0040c8:	10400003 	beqz	v0,9d0040d8 <_general_exception_handler+0x24>
9d0040cc:	3c029d00 	lui	v0,0x9d00
9d0040d0:	7000003f 	sdbbp
9d0040d4:	3c029d00 	lui	v0,0x9d00
9d0040d8:	24424144 	addiu	v0,v0,16708
9d0040dc:	10400005 	beqz	v0,9d0040f4 <_general_exception_handler+0x40>
9d0040e0:	00000000 	nop
9d0040e4:	27bdffe8 	addiu	sp,sp,-24
9d0040e8:	afbf0014 	sw	ra,20(sp)
9d0040ec:	0040f809 	jalr	v0
9d0040f0:	00000000 	nop
9d0040f4:	0b40103d 	j	9d0040f4 <_general_exception_handler+0x40>
9d0040f8:	00000000 	nop

Disassembly of section .vector_default:

9d0040fc <_DefaultInterrupt>:
9d0040fc:	3c020000 	lui	v0,0x0
9d004100:	24420000 	addiu	v0,v0,0
9d004104:	10400007 	beqz	v0,9d004124 <_DefaultInterrupt+0x28>
9d004108:	3c020000 	lui	v0,0x0
9d00410c:	24420000 	addiu	v0,v0,0
9d004110:	50400005 	beqzl	v0,9d004128 <_DefaultInterrupt+0x2c>
9d004114:	3c029d00 	lui	v0,0x9d00
9d004118:	7000003f 	sdbbp
9d00411c:	03e00008 	jr	ra
9d004120:	00000000 	nop
9d004124:	3c029d00 	lui	v0,0x9d00
9d004128:	24424144 	addiu	v0,v0,16708
9d00412c:	10400003 	beqz	v0,9d00413c <_DefaultInterrupt+0x40>
9d004130:	00000000 	nop
9d004134:	0040f809 	jalr	v0
9d004138:	00000000 	nop
9d00413c:	03e00008 	jr	ra
9d004140:	00000000 	nop

Disassembly of section .text:

9d004144 <__pic32_software_reset>:
9d004144:	41606000 	di
9d004148:	000000c0 	ehb
9d00414c:	3c03aa99 	lui	v1,0xaa99
9d004150:	3c02bf81 	lui	v0,0xbf81
9d004154:	24636655 	addiu	v1,v1,26197
9d004158:	ac40f230 	sw	zero,-3536(v0)
9d00415c:	ac43f230 	sw	v1,-3536(v0)
9d004160:	3c035566 	lui	v1,0x5566
9d004164:	346399aa 	ori	v1,v1,0x99aa
9d004168:	ac43f230 	sw	v1,-3536(v0)
9d00416c:	3c02bf81 	lui	v0,0xbf81
9d004170:	24030001 	li	v1,1
9d004174:	ac43f618 	sw	v1,-2536(v0)
9d004178:	3c02bf81 	lui	v0,0xbf81
9d00417c:	8c42f610 	lw	v0,-2544(v0)
9d004180:	0b401053 	j	9d00414c <__pic32_software_reset+0x8>
9d004184:	00000000 	nop

Disassembly of section .rodata:

9d004188 <.rodata>:
9d004188:	74616857 	jalx	9185a15c <_bmxdkpba_address+0x9183a15c>
9d00418c:	206f6420 	addi	t7,v1,25632
9d004190:	20756f79 	addi	s5,v1,28537
9d004194:	746e6177 	jalx	91b985dc <_bmxdkpba_address+0x91b785dc>
9d004198:	206f7420 	addi	t7,v1,29728
9d00419c:	74697277 	jalx	91a5c9dc <_bmxdkpba_address+0x91a3c9dc>
9d0041a0:	00203f65 	0x203f65
9d0041a4:	65636552 	0x65636552
9d0041a8:	64657669 	0x64657669
9d0041ac:	00642520 	0x642520
9d0041b0:	00000a0d 	break	0x0,0x28

Disassembly of section .text:

9d0041b4 <_nmi_handler>:
9d0041b4:	401a6000 	mfc0	k0,c0_status
9d0041b8:	3c1bffbf 	lui	k1,0xffbf
9d0041bc:	377bffff 	ori	k1,k1,0xffff
9d0041c0:	035bd024 	and	k0,k0,k1
9d0041c4:	409a6000 	mtc0	k0,c0_status
9d0041c8:	42000018 	eret

Disassembly of section .text._on_reset:

9d0041cc <_on_reset>:
9d0041cc:	03e00008 	jr	ra
9d0041d0:	00000000 	nop

Disassembly of section .text._on_bootstrap:

9d0041d4 <_on_bootstrap>:
9d0041d4:	03e00008 	jr	ra
9d0041d8:	00000000 	nop
